/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the CronSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CronSearch{}

// CronSearch Payload for listing crons
type CronSearch struct {
	// The assistant ID or graph name to search for.
	AssistantId *string `json:"assistant_id,omitempty"`
	// The thread ID to search for.
	ThreadId *string `json:"thread_id,omitempty"`
	// The maximum number of results to return.
	Limit *int32 `json:"limit,omitempty"`
	// The number of results to skip.
	Offset *int32 `json:"offset,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CronSearch CronSearch

// NewCronSearch instantiates a new CronSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronSearch() *CronSearch {
	this := CronSearch{}
	var limit int32 = 10
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// NewCronSearchWithDefaults instantiates a new CronSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronSearchWithDefaults() *CronSearch {
	this := CronSearch{}
	var limit int32 = 10
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// GetAssistantId returns the AssistantId field value if set, zero value otherwise.
func (o *CronSearch) GetAssistantId() string {
	if o == nil || IsNil(o.AssistantId) {
		var ret string
		return ret
	}
	return *o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSearch) GetAssistantIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssistantId) {
		return nil, false
	}
	return o.AssistantId, true
}

// HasAssistantId returns a boolean if a field has been set.
func (o *CronSearch) HasAssistantId() bool {
	if o != nil && !IsNil(o.AssistantId) {
		return true
	}

	return false
}

// SetAssistantId gets a reference to the given string and assigns it to the AssistantId field.
func (o *CronSearch) SetAssistantId(v string) {
	o.AssistantId = &v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *CronSearch) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSearch) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *CronSearch) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *CronSearch) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CronSearch) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSearch) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CronSearch) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CronSearch) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CronSearch) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSearch) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CronSearch) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *CronSearch) SetOffset(v int32) {
	o.Offset = &v
}

func (o CronSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CronSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssistantId) {
		toSerialize["assistant_id"] = o.AssistantId
	}
	if !IsNil(o.ThreadId) {
		toSerialize["thread_id"] = o.ThreadId
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CronSearch) UnmarshalJSON(data []byte) (err error) {
	varCronSearch := _CronSearch{}

	err = json.Unmarshal(data, &varCronSearch)

	if err != nil {
		return err
	}

	*o = CronSearch(varCronSearch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assistant_id")
		delete(additionalProperties, "thread_id")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "offset")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCronSearch struct {
	value *CronSearch
	isSet bool
}

func (v NullableCronSearch) Get() *CronSearch {
	return v.value
}

func (v *NullableCronSearch) Set(val *CronSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableCronSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableCronSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronSearch(val *CronSearch) *NullableCronSearch {
	return &NullableCronSearch{value: val, isSet: true}
}

func (v NullableCronSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


