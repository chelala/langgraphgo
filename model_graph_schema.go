/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the GraphSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphSchema{}

// GraphSchema Defines the structure and properties of a graph.
type GraphSchema struct {
	// The ID of the graph.
	GraphId string `json:"graph_id"`
	// The schema for the graph input. Missing if unable to generate JSON schema from graph.
	InputSchema map[string]interface{} `json:"input_schema,omitempty"`
	// The schema for the graph output. Missing if unable to generate JSON schema from graph.
	OutputSchema map[string]interface{} `json:"output_schema,omitempty"`
	// The schema for the graph state. Missing if unable to generate JSON schema from graph.
	StateSchema map[string]interface{} `json:"state_schema"`
	// The schema for the graph config. Missing if unable to generate JSON schema from graph.
	ConfigSchema map[string]interface{} `json:"config_schema"`
	AdditionalProperties map[string]interface{}
}

type _GraphSchema GraphSchema

// NewGraphSchema instantiates a new GraphSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphSchema(graphId string, stateSchema map[string]interface{}, configSchema map[string]interface{}) *GraphSchema {
	this := GraphSchema{}
	this.GraphId = graphId
	this.StateSchema = stateSchema
	this.ConfigSchema = configSchema
	return &this
}

// NewGraphSchemaWithDefaults instantiates a new GraphSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphSchemaWithDefaults() *GraphSchema {
	this := GraphSchema{}
	return &this
}

// GetGraphId returns the GraphId field value
func (o *GraphSchema) GetGraphId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphId
}

// GetGraphIdOk returns a tuple with the GraphId field value
// and a boolean to check if the value has been set.
func (o *GraphSchema) GetGraphIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphId, true
}

// SetGraphId sets field value
func (o *GraphSchema) SetGraphId(v string) {
	o.GraphId = v
}


// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *GraphSchema) GetInputSchema() map[string]interface{} {
	if o == nil || IsNil(o.InputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSchema) GetInputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return map[string]interface{}{}, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *GraphSchema) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given map[string]interface{} and assigns it to the InputSchema field.
func (o *GraphSchema) SetInputSchema(v map[string]interface{}) {
	o.InputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *GraphSchema) GetOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.OutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphSchema) GetOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *GraphSchema) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given map[string]interface{} and assigns it to the OutputSchema field.
func (o *GraphSchema) SetOutputSchema(v map[string]interface{}) {
	o.OutputSchema = v
}

// GetStateSchema returns the StateSchema field value
func (o *GraphSchema) GetStateSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StateSchema
}

// GetStateSchemaOk returns a tuple with the StateSchema field value
// and a boolean to check if the value has been set.
func (o *GraphSchema) GetStateSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.StateSchema, true
}

// SetStateSchema sets field value
func (o *GraphSchema) SetStateSchema(v map[string]interface{}) {
	o.StateSchema = v
}


// GetConfigSchema returns the ConfigSchema field value
func (o *GraphSchema) GetConfigSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConfigSchema
}

// GetConfigSchemaOk returns a tuple with the ConfigSchema field value
// and a boolean to check if the value has been set.
func (o *GraphSchema) GetConfigSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ConfigSchema, true
}

// SetConfigSchema sets field value
func (o *GraphSchema) SetConfigSchema(v map[string]interface{}) {
	o.ConfigSchema = v
}


func (o GraphSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["graph_id"] = o.GraphId
	if !IsNil(o.InputSchema) {
		toSerialize["input_schema"] = o.InputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["output_schema"] = o.OutputSchema
	}
	toSerialize["state_schema"] = o.StateSchema
	toSerialize["config_schema"] = o.ConfigSchema

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"graph_id",
		"state_schema",
		"config_schema",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varGraphSchema := _GraphSchema{}

	err = json.Unmarshal(data, &varGraphSchema)

	if err != nil {
		return err
	}

	*o = GraphSchema(varGraphSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "graph_id")
		delete(additionalProperties, "input_schema")
		delete(additionalProperties, "output_schema")
		delete(additionalProperties, "state_schema")
		delete(additionalProperties, "config_schema")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphSchema struct {
	value *GraphSchema
	isSet bool
}

func (v NullableGraphSchema) Get() *GraphSchema {
	return v.value
}

func (v *NullableGraphSchema) Set(val *GraphSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphSchema(val *GraphSchema) *NullableGraphSchema {
	return &NullableGraphSchema{value: val, isSet: true}
}

func (v NullableGraphSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


