/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)


// Goto Name of the node(s) to navigate to next or node(s) to be executed with a provided input.
type Goto struct {
	Send *Send
	ArrayOfSend *[]Send
	ArrayOfString *[]string
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Goto) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into Send
	err = json.Unmarshal(data, &dst.Send);
	if err == nil {
		jsonSend, _ := json.Marshal(dst.Send)
		if string(jsonSend) == "{}" { // empty struct
			dst.Send = nil
		} else {
			return nil // data stored in dst.Send, return on the first match
		}
	} else {
		dst.Send = nil
	}

	// try to unmarshal JSON data into ArrayOfSend
	err = json.Unmarshal(data, &dst.ArrayOfSend);
	if err == nil {
		jsonArrayOfSend, _ := json.Marshal(dst.ArrayOfSend)
		if string(jsonArrayOfSend) == "{}" { // empty struct
			dst.ArrayOfSend = nil
		} else {
			return nil // data stored in dst.ArrayOfSend, return on the first match
		}
	} else {
		dst.ArrayOfSend = nil
	}

	// try to unmarshal JSON data into ArrayOfString
	err = json.Unmarshal(data, &dst.ArrayOfString);
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			return nil // data stored in dst.ArrayOfString, return on the first match
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Goto)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Goto) MarshalJSON() ([]byte, error) {
	if src.Send != nil {
		return json.Marshal(&src.Send)
	}

	if src.ArrayOfSend != nil {
		return json.Marshal(&src.ArrayOfSend)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableGoto struct {
	value *Goto
	isSet bool
}

func (v NullableGoto) Get() *Goto {
	return v.value
}

func (v *NullableGoto) Set(val *Goto) {
	v.value = val
	v.isSet = true
}

func (v NullableGoto) IsSet() bool {
	return v.isSet
}

func (v *NullableGoto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoto(val *Goto) *NullableGoto {
	return &NullableGoto{value: val, isSet: true}
}

func (v NullableGoto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


