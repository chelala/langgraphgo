/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the GraphSchemaNoId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphSchemaNoId{}

// GraphSchemaNoId Defines the structure and properties of a graph without an ID.
type GraphSchemaNoId struct {
	// The schema for the graph input. Missing if unable to generate JSON schema from graph.
	InputSchema map[string]interface{} `json:"input_schema"`
	// The schema for the graph output. Missing if unable to generate JSON schema from graph.
	OutputSchema map[string]interface{} `json:"output_schema"`
	// The schema for the graph state. Missing if unable to generate JSON schema from graph.
	StateSchema map[string]interface{} `json:"state_schema"`
	// The schema for the graph config. Missing if unable to generate JSON schema from graph.
	ConfigSchema map[string]interface{} `json:"config_schema"`
	AdditionalProperties map[string]interface{}
}

type _GraphSchemaNoId GraphSchemaNoId

// NewGraphSchemaNoId instantiates a new GraphSchemaNoId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphSchemaNoId(inputSchema map[string]interface{}, outputSchema map[string]interface{}, stateSchema map[string]interface{}, configSchema map[string]interface{}) *GraphSchemaNoId {
	this := GraphSchemaNoId{}
	this.InputSchema = inputSchema
	this.OutputSchema = outputSchema
	this.StateSchema = stateSchema
	this.ConfigSchema = configSchema
	return &this
}

// NewGraphSchemaNoIdWithDefaults instantiates a new GraphSchemaNoId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphSchemaNoIdWithDefaults() *GraphSchemaNoId {
	this := GraphSchemaNoId{}
	return &this
}

// GetInputSchema returns the InputSchema field value
func (o *GraphSchemaNoId) GetInputSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value
// and a boolean to check if the value has been set.
func (o *GraphSchemaNoId) GetInputSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.InputSchema, true
}

// SetInputSchema sets field value
func (o *GraphSchemaNoId) SetInputSchema(v map[string]interface{}) {
	o.InputSchema = v
}


// GetOutputSchema returns the OutputSchema field value
func (o *GraphSchemaNoId) GetOutputSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value
// and a boolean to check if the value has been set.
func (o *GraphSchemaNoId) GetOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.OutputSchema, true
}

// SetOutputSchema sets field value
func (o *GraphSchemaNoId) SetOutputSchema(v map[string]interface{}) {
	o.OutputSchema = v
}


// GetStateSchema returns the StateSchema field value
func (o *GraphSchemaNoId) GetStateSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StateSchema
}

// GetStateSchemaOk returns a tuple with the StateSchema field value
// and a boolean to check if the value has been set.
func (o *GraphSchemaNoId) GetStateSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.StateSchema, true
}

// SetStateSchema sets field value
func (o *GraphSchemaNoId) SetStateSchema(v map[string]interface{}) {
	o.StateSchema = v
}


// GetConfigSchema returns the ConfigSchema field value
func (o *GraphSchemaNoId) GetConfigSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConfigSchema
}

// GetConfigSchemaOk returns a tuple with the ConfigSchema field value
// and a boolean to check if the value has been set.
func (o *GraphSchemaNoId) GetConfigSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ConfigSchema, true
}

// SetConfigSchema sets field value
func (o *GraphSchemaNoId) SetConfigSchema(v map[string]interface{}) {
	o.ConfigSchema = v
}


func (o GraphSchemaNoId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphSchemaNoId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input_schema"] = o.InputSchema
	toSerialize["output_schema"] = o.OutputSchema
	toSerialize["state_schema"] = o.StateSchema
	toSerialize["config_schema"] = o.ConfigSchema

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphSchemaNoId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input_schema",
		"output_schema",
		"state_schema",
		"config_schema",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varGraphSchemaNoId := _GraphSchemaNoId{}

	err = json.Unmarshal(data, &varGraphSchemaNoId)

	if err != nil {
		return err
	}

	*o = GraphSchemaNoId(varGraphSchemaNoId)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "input_schema")
		delete(additionalProperties, "output_schema")
		delete(additionalProperties, "state_schema")
		delete(additionalProperties, "config_schema")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphSchemaNoId struct {
	value *GraphSchemaNoId
	isSet bool
}

func (v NullableGraphSchemaNoId) Get() *GraphSchemaNoId {
	return v.value
}

func (v *NullableGraphSchemaNoId) Set(val *GraphSchemaNoId) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphSchemaNoId) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphSchemaNoId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphSchemaNoId(val *GraphSchemaNoId) *NullableGraphSchemaNoId {
	return &NullableGraphSchemaNoId{value: val, isSet: true}
}

func (v NullableGraphSchemaNoId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphSchemaNoId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


