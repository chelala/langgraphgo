/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the AssistantPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantPatch{}

// AssistantPatch Payload for updating an assistant.
type AssistantPatch struct {
	// The ID of the graph the assistant should use. The graph ID is normally set in your langgraph.json configuration. If not provided, assistant will keep pointing to same graph.
	GraphId *string `json:"graph_id,omitempty"`
	// Configuration to use for the graph. Useful when graph is configurable and you want to update the assistant's configuration.
	Config map[string]interface{} `json:"config,omitempty"`
	// Metadata to merge with existing assistant metadata.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The new name for the assistant. If not provided, assistant will keep its current name.
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssistantPatch AssistantPatch

// NewAssistantPatch instantiates a new AssistantPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantPatch() *AssistantPatch {
	this := AssistantPatch{}
	return &this
}

// NewAssistantPatchWithDefaults instantiates a new AssistantPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantPatchWithDefaults() *AssistantPatch {
	this := AssistantPatch{}
	return &this
}

// GetGraphId returns the GraphId field value if set, zero value otherwise.
func (o *AssistantPatch) GetGraphId() string {
	if o == nil || IsNil(o.GraphId) {
		var ret string
		return ret
	}
	return *o.GraphId
}

// GetGraphIdOk returns a tuple with the GraphId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantPatch) GetGraphIdOk() (*string, bool) {
	if o == nil || IsNil(o.GraphId) {
		return nil, false
	}
	return o.GraphId, true
}

// HasGraphId returns a boolean if a field has been set.
func (o *AssistantPatch) HasGraphId() bool {
	if o != nil && !IsNil(o.GraphId) {
		return true
	}

	return false
}

// SetGraphId gets a reference to the given string and assigns it to the GraphId field.
func (o *AssistantPatch) SetGraphId(v string) {
	o.GraphId = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AssistantPatch) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantPatch) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AssistantPatch) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *AssistantPatch) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AssistantPatch) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantPatch) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AssistantPatch) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *AssistantPatch) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssistantPatch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantPatch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssistantPatch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssistantPatch) SetName(v string) {
	o.Name = &v
}

func (o AssistantPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GraphId) {
		toSerialize["graph_id"] = o.GraphId
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssistantPatch) UnmarshalJSON(data []byte) (err error) {
	varAssistantPatch := _AssistantPatch{}

	err = json.Unmarshal(data, &varAssistantPatch)

	if err != nil {
		return err
	}

	*o = AssistantPatch(varAssistantPatch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "graph_id")
		delete(additionalProperties, "config")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssistantPatch struct {
	value *AssistantPatch
	isSet bool
}

func (v NullableAssistantPatch) Get() *AssistantPatch {
	return v.value
}

func (v *NullableAssistantPatch) Set(val *AssistantPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantPatch(val *AssistantPatch) *NullableAssistantPatch {
	return &NullableAssistantPatch{value: val, isSet: true}
}

func (v NullableAssistantPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


