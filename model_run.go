/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Run type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Run{}

// Run struct for Run
type Run struct {
	// The ID of the run.
	RunId string `json:"run_id"`
	// The ID of the thread.
	ThreadId string `json:"thread_id"`
	// The assistant that was used for this run.
	AssistantId string `json:"assistant_id"`
	// The time the run was created.
	CreatedAt time.Time `json:"created_at"`
	// The last time the run was updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The status of the run. One of 'pending', 'error', 'success', 'timeout', 'interrupted'.
	Status string `json:"status"`
	// The run metadata.
	Metadata map[string]interface{} `json:"metadata"`
	Kwargs map[string]interface{} `json:"kwargs"`
	// Strategy to handle concurrent runs on the same thread.
	MultitaskStrategy string `json:"multitask_strategy"`
	AdditionalProperties map[string]interface{}
}

type _Run Run

// NewRun instantiates a new Run object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRun(runId string, threadId string, assistantId string, createdAt time.Time, updatedAt time.Time, status string, metadata map[string]interface{}, kwargs map[string]interface{}, multitaskStrategy string) *Run {
	this := Run{}
	this.RunId = runId
	this.ThreadId = threadId
	this.AssistantId = assistantId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Status = status
	this.Metadata = metadata
	this.Kwargs = kwargs
	this.MultitaskStrategy = multitaskStrategy
	return &this
}

// NewRunWithDefaults instantiates a new Run object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunWithDefaults() *Run {
	this := Run{}
	return &this
}

// GetRunId returns the RunId field value
func (o *Run) GetRunId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value
// and a boolean to check if the value has been set.
func (o *Run) GetRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunId, true
}

// SetRunId sets field value
func (o *Run) SetRunId(v string) {
	o.RunId = v
}


// GetThreadId returns the ThreadId field value
func (o *Run) GetThreadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value
// and a boolean to check if the value has been set.
func (o *Run) GetThreadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreadId, true
}

// SetThreadId sets field value
func (o *Run) SetThreadId(v string) {
	o.ThreadId = v
}


// GetAssistantId returns the AssistantId field value
func (o *Run) GetAssistantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *Run) GetAssistantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *Run) SetAssistantId(v string) {
	o.AssistantId = v
}


// GetCreatedAt returns the CreatedAt field value
func (o *Run) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Run) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Run) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}


// GetUpdatedAt returns the UpdatedAt field value
func (o *Run) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Run) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Run) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}


// GetStatus returns the Status field value
func (o *Run) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Run) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Run) SetStatus(v string) {
	o.Status = v
}


// GetMetadata returns the Metadata field value
func (o *Run) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Run) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Run) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}


// GetKwargs returns the Kwargs field value
func (o *Run) GetKwargs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Kwargs
}

// GetKwargsOk returns a tuple with the Kwargs field value
// and a boolean to check if the value has been set.
func (o *Run) GetKwargsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Kwargs, true
}

// SetKwargs sets field value
func (o *Run) SetKwargs(v map[string]interface{}) {
	o.Kwargs = v
}


// GetMultitaskStrategy returns the MultitaskStrategy field value
func (o *Run) GetMultitaskStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MultitaskStrategy
}

// GetMultitaskStrategyOk returns a tuple with the MultitaskStrategy field value
// and a boolean to check if the value has been set.
func (o *Run) GetMultitaskStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultitaskStrategy, true
}

// SetMultitaskStrategy sets field value
func (o *Run) SetMultitaskStrategy(v string) {
	o.MultitaskStrategy = v
}


func (o Run) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Run) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["run_id"] = o.RunId
	toSerialize["thread_id"] = o.ThreadId
	toSerialize["assistant_id"] = o.AssistantId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["status"] = o.Status
	toSerialize["metadata"] = o.Metadata
	toSerialize["kwargs"] = o.Kwargs
	toSerialize["multitask_strategy"] = o.MultitaskStrategy

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Run) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"run_id",
		"thread_id",
		"assistant_id",
		"created_at",
		"updated_at",
		"status",
		"metadata",
		"kwargs",
		"multitask_strategy",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varRun := _Run{}

	err = json.Unmarshal(data, &varRun)

	if err != nil {
		return err
	}

	*o = Run(varRun)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "run_id")
		delete(additionalProperties, "thread_id")
		delete(additionalProperties, "assistant_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "status")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "kwargs")
		delete(additionalProperties, "multitask_strategy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRun struct {
	value *Run
	isSet bool
}

func (v NullableRun) Get() *Run {
	return v.value
}

func (v *NullableRun) Set(val *Run) {
	v.value = val
	v.isSet = true
}

func (v NullableRun) IsSet() bool {
	return v.isSet
}

func (v *NullableRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRun(val *Run) *NullableRun {
	return &NullableRun{value: val, isSet: true}
}

func (v NullableRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


