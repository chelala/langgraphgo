/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ThreadStateTasksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadStateTasksInner{}

// ThreadStateTasksInner struct for ThreadStateTasksInner
type ThreadStateTasksInner struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Error *string `json:"error,omitempty"`
	Interrupts []interface{} `json:"interrupts,omitempty"`
	Checkpoint *CheckpointConfig `json:"checkpoint,omitempty"`
	State *ThreadState `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadStateTasksInner ThreadStateTasksInner

// NewThreadStateTasksInner instantiates a new ThreadStateTasksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadStateTasksInner(id string, name string) *ThreadStateTasksInner {
	this := ThreadStateTasksInner{}
	this.Id = id
	this.Name = name
	return &this
}

// NewThreadStateTasksInnerWithDefaults instantiates a new ThreadStateTasksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadStateTasksInnerWithDefaults() *ThreadStateTasksInner {
	this := ThreadStateTasksInner{}
	return &this
}

// GetId returns the Id field value
func (o *ThreadStateTasksInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ThreadStateTasksInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ThreadStateTasksInner) SetId(v string) {
	o.Id = v
}


// GetName returns the Name field value
func (o *ThreadStateTasksInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ThreadStateTasksInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ThreadStateTasksInner) SetName(v string) {
	o.Name = v
}


// GetError returns the Error field value if set, zero value otherwise.
func (o *ThreadStateTasksInner) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateTasksInner) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ThreadStateTasksInner) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ThreadStateTasksInner) SetError(v string) {
	o.Error = &v
}

// GetInterrupts returns the Interrupts field value if set, zero value otherwise.
func (o *ThreadStateTasksInner) GetInterrupts() []interface{} {
	if o == nil || IsNil(o.Interrupts) {
		var ret []interface{}
		return ret
	}
	return o.Interrupts
}

// GetInterruptsOk returns a tuple with the Interrupts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateTasksInner) GetInterruptsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Interrupts) {
		return nil, false
	}
	return o.Interrupts, true
}

// HasInterrupts returns a boolean if a field has been set.
func (o *ThreadStateTasksInner) HasInterrupts() bool {
	if o != nil && !IsNil(o.Interrupts) {
		return true
	}

	return false
}

// SetInterrupts gets a reference to the given []interface{} and assigns it to the Interrupts field.
func (o *ThreadStateTasksInner) SetInterrupts(v []interface{}) {
	o.Interrupts = v
}

// GetCheckpoint returns the Checkpoint field value if set, zero value otherwise.
func (o *ThreadStateTasksInner) GetCheckpoint() CheckpointConfig {
	if o == nil || IsNil(o.Checkpoint) {
		var ret CheckpointConfig
		return ret
	}
	return *o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateTasksInner) GetCheckpointOk() (*CheckpointConfig, bool) {
	if o == nil || IsNil(o.Checkpoint) {
		return nil, false
	}
	return o.Checkpoint, true
}

// HasCheckpoint returns a boolean if a field has been set.
func (o *ThreadStateTasksInner) HasCheckpoint() bool {
	if o != nil && !IsNil(o.Checkpoint) {
		return true
	}

	return false
}

// SetCheckpoint gets a reference to the given CheckpointConfig and assigns it to the Checkpoint field.
func (o *ThreadStateTasksInner) SetCheckpoint(v CheckpointConfig) {
	o.Checkpoint = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ThreadStateTasksInner) GetState() ThreadState {
	if o == nil || IsNil(o.State) {
		var ret ThreadState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateTasksInner) GetStateOk() (*ThreadState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ThreadStateTasksInner) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ThreadState and assigns it to the State field.
func (o *ThreadStateTasksInner) SetState(v ThreadState) {
	o.State = &v
}

func (o ThreadStateTasksInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadStateTasksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Interrupts) {
		toSerialize["interrupts"] = o.Interrupts
	}
	if !IsNil(o.Checkpoint) {
		toSerialize["checkpoint"] = o.Checkpoint
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadStateTasksInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varThreadStateTasksInner := _ThreadStateTasksInner{}

	err = json.Unmarshal(data, &varThreadStateTasksInner)

	if err != nil {
		return err
	}

	*o = ThreadStateTasksInner(varThreadStateTasksInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "error")
		delete(additionalProperties, "interrupts")
		delete(additionalProperties, "checkpoint")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadStateTasksInner struct {
	value *ThreadStateTasksInner
	isSet bool
}

func (v NullableThreadStateTasksInner) Get() *ThreadStateTasksInner {
	return v.value
}

func (v *NullableThreadStateTasksInner) Set(val *ThreadStateTasksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadStateTasksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadStateTasksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadStateTasksInner(val *ThreadStateTasksInner) *NullableThreadStateTasksInner {
	return &NullableThreadStateTasksInner{value: val, isSet: true}
}

func (v NullableThreadStateTasksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadStateTasksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


