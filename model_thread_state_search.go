/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the ThreadStateSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadStateSearch{}

// ThreadStateSearch struct for ThreadStateSearch
type ThreadStateSearch struct {
	// The maximum number of states to return.
	Limit *int32 `json:"limit,omitempty"`
	// Return states before this checkpoint.
	Before *CheckpointConfig `json:"before,omitempty"`
	// Filter states by metadata key-value pairs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Return states for this subgraph.
	Checkpoint *CheckpointConfig `json:"checkpoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadStateSearch ThreadStateSearch

// NewThreadStateSearch instantiates a new ThreadStateSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadStateSearch() *ThreadStateSearch {
	this := ThreadStateSearch{}
	var limit int32 = 10
	this.Limit = &limit
	return &this
}

// NewThreadStateSearchWithDefaults instantiates a new ThreadStateSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadStateSearchWithDefaults() *ThreadStateSearch {
	this := ThreadStateSearch{}
	var limit int32 = 10
	this.Limit = &limit
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ThreadStateSearch) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateSearch) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ThreadStateSearch) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ThreadStateSearch) SetLimit(v int32) {
	o.Limit = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *ThreadStateSearch) GetBefore() CheckpointConfig {
	if o == nil || IsNil(o.Before) {
		var ret CheckpointConfig
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateSearch) GetBeforeOk() (*CheckpointConfig, bool) {
	if o == nil || IsNil(o.Before) {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *ThreadStateSearch) HasBefore() bool {
	if o != nil && !IsNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given CheckpointConfig and assigns it to the Before field.
func (o *ThreadStateSearch) SetBefore(v CheckpointConfig) {
	o.Before = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ThreadStateSearch) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateSearch) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ThreadStateSearch) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ThreadStateSearch) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCheckpoint returns the Checkpoint field value if set, zero value otherwise.
func (o *ThreadStateSearch) GetCheckpoint() CheckpointConfig {
	if o == nil || IsNil(o.Checkpoint) {
		var ret CheckpointConfig
		return ret
	}
	return *o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateSearch) GetCheckpointOk() (*CheckpointConfig, bool) {
	if o == nil || IsNil(o.Checkpoint) {
		return nil, false
	}
	return o.Checkpoint, true
}

// HasCheckpoint returns a boolean if a field has been set.
func (o *ThreadStateSearch) HasCheckpoint() bool {
	if o != nil && !IsNil(o.Checkpoint) {
		return true
	}

	return false
}

// SetCheckpoint gets a reference to the given CheckpointConfig and assigns it to the Checkpoint field.
func (o *ThreadStateSearch) SetCheckpoint(v CheckpointConfig) {
	o.Checkpoint = &v
}

func (o ThreadStateSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadStateSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Checkpoint) {
		toSerialize["checkpoint"] = o.Checkpoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadStateSearch) UnmarshalJSON(data []byte) (err error) {
	varThreadStateSearch := _ThreadStateSearch{}

	err = json.Unmarshal(data, &varThreadStateSearch)

	if err != nil {
		return err
	}

	*o = ThreadStateSearch(varThreadStateSearch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "limit")
		delete(additionalProperties, "before")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "checkpoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadStateSearch struct {
	value *ThreadStateSearch
	isSet bool
}

func (v NullableThreadStateSearch) Get() *ThreadStateSearch {
	return v.value
}

func (v *NullableThreadStateSearch) Set(val *ThreadStateSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadStateSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadStateSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadStateSearch(val *ThreadStateSearch) *NullableThreadStateSearch {
	return &NullableThreadStateSearch{value: val, isSet: true}
}

func (v NullableThreadStateSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadStateSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


