/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)


// StreamMode The stream mode(s) to use.
// LangGraph is built with first class support for streaming. There are several different ways to stream back outputs from a graph run:

// "values": Emit all values in the state after each step.
// "updates": Emit only the node names and updates returned by the nodes after each step. If multiple updates are made in the same step (e.g. multiple nodes are run) then those updates are emitted separately.
// "custom": Emit custom data from inside nodes using StreamWriter.
// "messages": Emit LLM messages token-by-token together with metadata for any LLM invocations inside nodes.
// "debug": Emit debug events with as much information as possible for each step.
type StreamMode struct {
	ArrayOfString *[]string
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *StreamMode) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfString
	err = json.Unmarshal(data, &dst.ArrayOfString);
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			return nil // data stored in dst.ArrayOfString, return on the first match
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(StreamMode)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StreamMode) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableStreamMode struct {
	value *StreamMode
	isSet bool
}

func (v NullableStreamMode) Get() *StreamMode {
	return v.value
}

func (v *NullableStreamMode) Set(val *StreamMode) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamMode) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamMode(val *StreamMode) *NullableStreamMode {
	return &NullableStreamMode{value: val, isSet: true}
}

func (v NullableStreamMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


