/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the ThreadSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadSearchRequest{}

// ThreadSearchRequest Payload for listing threads.
type ThreadSearchRequest struct {
	// Thread metadata to filter on.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// State values to filter on.
	Values map[string]interface{} `json:"values,omitempty"`
	// Thread status to filter on.
	Status *string `json:"status,omitempty"`
	// Maximum number to return.
	Limit *int32 `json:"limit,omitempty"`
	// Offset to start from.
	Offset *int32 `json:"offset,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadSearchRequest ThreadSearchRequest

// NewThreadSearchRequest instantiates a new ThreadSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadSearchRequest() *ThreadSearchRequest {
	this := ThreadSearchRequest{}
	var limit int32 = 10
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// NewThreadSearchRequestWithDefaults instantiates a new ThreadSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadSearchRequestWithDefaults() *ThreadSearchRequest {
	this := ThreadSearchRequest{}
	var limit int32 = 10
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ThreadSearchRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadSearchRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ThreadSearchRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ThreadSearchRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ThreadSearchRequest) GetValues() map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadSearchRequest) GetValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return map[string]interface{}{}, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ThreadSearchRequest) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]interface{} and assigns it to the Values field.
func (o *ThreadSearchRequest) SetValues(v map[string]interface{}) {
	o.Values = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ThreadSearchRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadSearchRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ThreadSearchRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ThreadSearchRequest) SetStatus(v string) {
	o.Status = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ThreadSearchRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadSearchRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ThreadSearchRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ThreadSearchRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ThreadSearchRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadSearchRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ThreadSearchRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ThreadSearchRequest) SetOffset(v int32) {
	o.Offset = &v
}

func (o ThreadSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadSearchRequest) UnmarshalJSON(data []byte) (err error) {
	varThreadSearchRequest := _ThreadSearchRequest{}

	err = json.Unmarshal(data, &varThreadSearchRequest)

	if err != nil {
		return err
	}

	*o = ThreadSearchRequest(varThreadSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "values")
		delete(additionalProperties, "status")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "offset")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadSearchRequest struct {
	value *ThreadSearchRequest
	isSet bool
}

func (v NullableThreadSearchRequest) Get() *ThreadSearchRequest {
	return v.value
}

func (v *NullableThreadSearchRequest) Set(val *ThreadSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadSearchRequest(val *ThreadSearchRequest) *NullableThreadSearchRequest {
	return &NullableThreadSearchRequest{value: val, isSet: true}
}

func (v NullableThreadSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


