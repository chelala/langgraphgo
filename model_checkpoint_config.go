/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the CheckpointConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckpointConfig{}

// CheckpointConfig Checkpoint config.
type CheckpointConfig struct {
	// Unique identifier for the thread associated with this checkpoint.
	ThreadId *string `json:"thread_id,omitempty"`
	// Namespace for the checkpoint, used for organization and retrieval.
	CheckpointNs *string `json:"checkpoint_ns,omitempty"`
	// Optional unique identifier for the checkpoint itself.
	CheckpointId *string `json:"checkpoint_id,omitempty"`
	// Optional dictionary containing checkpoint-specific data.
	CheckpointMap map[string]interface{} `json:"checkpoint_map,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CheckpointConfig CheckpointConfig

// NewCheckpointConfig instantiates a new CheckpointConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckpointConfig() *CheckpointConfig {
	this := CheckpointConfig{}
	return &this
}

// NewCheckpointConfigWithDefaults instantiates a new CheckpointConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckpointConfigWithDefaults() *CheckpointConfig {
	this := CheckpointConfig{}
	return &this
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *CheckpointConfig) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointConfig) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *CheckpointConfig) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *CheckpointConfig) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetCheckpointNs returns the CheckpointNs field value if set, zero value otherwise.
func (o *CheckpointConfig) GetCheckpointNs() string {
	if o == nil || IsNil(o.CheckpointNs) {
		var ret string
		return ret
	}
	return *o.CheckpointNs
}

// GetCheckpointNsOk returns a tuple with the CheckpointNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointConfig) GetCheckpointNsOk() (*string, bool) {
	if o == nil || IsNil(o.CheckpointNs) {
		return nil, false
	}
	return o.CheckpointNs, true
}

// HasCheckpointNs returns a boolean if a field has been set.
func (o *CheckpointConfig) HasCheckpointNs() bool {
	if o != nil && !IsNil(o.CheckpointNs) {
		return true
	}

	return false
}

// SetCheckpointNs gets a reference to the given string and assigns it to the CheckpointNs field.
func (o *CheckpointConfig) SetCheckpointNs(v string) {
	o.CheckpointNs = &v
}

// GetCheckpointId returns the CheckpointId field value if set, zero value otherwise.
func (o *CheckpointConfig) GetCheckpointId() string {
	if o == nil || IsNil(o.CheckpointId) {
		var ret string
		return ret
	}
	return *o.CheckpointId
}

// GetCheckpointIdOk returns a tuple with the CheckpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointConfig) GetCheckpointIdOk() (*string, bool) {
	if o == nil || IsNil(o.CheckpointId) {
		return nil, false
	}
	return o.CheckpointId, true
}

// HasCheckpointId returns a boolean if a field has been set.
func (o *CheckpointConfig) HasCheckpointId() bool {
	if o != nil && !IsNil(o.CheckpointId) {
		return true
	}

	return false
}

// SetCheckpointId gets a reference to the given string and assigns it to the CheckpointId field.
func (o *CheckpointConfig) SetCheckpointId(v string) {
	o.CheckpointId = &v
}

// GetCheckpointMap returns the CheckpointMap field value if set, zero value otherwise.
func (o *CheckpointConfig) GetCheckpointMap() map[string]interface{} {
	if o == nil || IsNil(o.CheckpointMap) {
		var ret map[string]interface{}
		return ret
	}
	return o.CheckpointMap
}

// GetCheckpointMapOk returns a tuple with the CheckpointMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointConfig) GetCheckpointMapOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CheckpointMap) {
		return map[string]interface{}{}, false
	}
	return o.CheckpointMap, true
}

// HasCheckpointMap returns a boolean if a field has been set.
func (o *CheckpointConfig) HasCheckpointMap() bool {
	if o != nil && !IsNil(o.CheckpointMap) {
		return true
	}

	return false
}

// SetCheckpointMap gets a reference to the given map[string]interface{} and assigns it to the CheckpointMap field.
func (o *CheckpointConfig) SetCheckpointMap(v map[string]interface{}) {
	o.CheckpointMap = v
}

func (o CheckpointConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckpointConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ThreadId) {
		toSerialize["thread_id"] = o.ThreadId
	}
	if !IsNil(o.CheckpointNs) {
		toSerialize["checkpoint_ns"] = o.CheckpointNs
	}
	if !IsNil(o.CheckpointId) {
		toSerialize["checkpoint_id"] = o.CheckpointId
	}
	if !IsNil(o.CheckpointMap) {
		toSerialize["checkpoint_map"] = o.CheckpointMap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CheckpointConfig) UnmarshalJSON(data []byte) (err error) {
	varCheckpointConfig := _CheckpointConfig{}

	err = json.Unmarshal(data, &varCheckpointConfig)

	if err != nil {
		return err
	}

	*o = CheckpointConfig(varCheckpointConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "thread_id")
		delete(additionalProperties, "checkpoint_ns")
		delete(additionalProperties, "checkpoint_id")
		delete(additionalProperties, "checkpoint_map")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckpointConfig struct {
	value *CheckpointConfig
	isSet bool
}

func (v NullableCheckpointConfig) Get() *CheckpointConfig {
	return v.value
}

func (v *NullableCheckpointConfig) Set(val *CheckpointConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckpointConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckpointConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckpointConfig(val *CheckpointConfig) *NullableCheckpointConfig {
	return &NullableCheckpointConfig{value: val, isSet: true}
}

func (v NullableCheckpointConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckpointConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


