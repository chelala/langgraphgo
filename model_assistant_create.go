/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the AssistantCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantCreate{}

// AssistantCreate Payload for creating an assistant.
type AssistantCreate struct {
	// The ID of the assistant. If not provided, a random UUID will be generated.
	AssistantId *string `json:"assistant_id,omitempty"`
	// The ID of the graph the assistant should use. The graph ID is normally set in your langgraph.json configuration.
	GraphId string `json:"graph_id"`
	// Configuration to use for the graph. Useful when graph is configurable and you want to create different assistants based on different configurations.
	Config map[string]interface{} `json:"config,omitempty"`
	// Metadata to add to assistant.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing assistant).
	IfExists *string `json:"if_exists,omitempty"`
	// The name of the assistant. Defaults to 'Untitled'.
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssistantCreate AssistantCreate

// NewAssistantCreate instantiates a new AssistantCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantCreate(graphId string) *AssistantCreate {
	this := AssistantCreate{}
	this.GraphId = graphId
	var ifExists string = "raise"
	this.IfExists = &ifExists
	return &this
}

// NewAssistantCreateWithDefaults instantiates a new AssistantCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantCreateWithDefaults() *AssistantCreate {
	this := AssistantCreate{}
	var ifExists string = "raise"
	this.IfExists = &ifExists
	return &this
}

// GetAssistantId returns the AssistantId field value if set, zero value otherwise.
func (o *AssistantCreate) GetAssistantId() string {
	if o == nil || IsNil(o.AssistantId) {
		var ret string
		return ret
	}
	return *o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantCreate) GetAssistantIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssistantId) {
		return nil, false
	}
	return o.AssistantId, true
}

// HasAssistantId returns a boolean if a field has been set.
func (o *AssistantCreate) HasAssistantId() bool {
	if o != nil && !IsNil(o.AssistantId) {
		return true
	}

	return false
}

// SetAssistantId gets a reference to the given string and assigns it to the AssistantId field.
func (o *AssistantCreate) SetAssistantId(v string) {
	o.AssistantId = &v
}

// GetGraphId returns the GraphId field value
func (o *AssistantCreate) GetGraphId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphId
}

// GetGraphIdOk returns a tuple with the GraphId field value
// and a boolean to check if the value has been set.
func (o *AssistantCreate) GetGraphIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphId, true
}

// SetGraphId sets field value
func (o *AssistantCreate) SetGraphId(v string) {
	o.GraphId = v
}


// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AssistantCreate) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantCreate) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AssistantCreate) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *AssistantCreate) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AssistantCreate) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantCreate) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AssistantCreate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *AssistantCreate) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetIfExists returns the IfExists field value if set, zero value otherwise.
func (o *AssistantCreate) GetIfExists() string {
	if o == nil || IsNil(o.IfExists) {
		var ret string
		return ret
	}
	return *o.IfExists
}

// GetIfExistsOk returns a tuple with the IfExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantCreate) GetIfExistsOk() (*string, bool) {
	if o == nil || IsNil(o.IfExists) {
		return nil, false
	}
	return o.IfExists, true
}

// HasIfExists returns a boolean if a field has been set.
func (o *AssistantCreate) HasIfExists() bool {
	if o != nil && !IsNil(o.IfExists) {
		return true
	}

	return false
}

// SetIfExists gets a reference to the given string and assigns it to the IfExists field.
func (o *AssistantCreate) SetIfExists(v string) {
	o.IfExists = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssistantCreate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantCreate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssistantCreate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssistantCreate) SetName(v string) {
	o.Name = &v
}

func (o AssistantCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssistantId) {
		toSerialize["assistant_id"] = o.AssistantId
	}
	toSerialize["graph_id"] = o.GraphId
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.IfExists) {
		toSerialize["if_exists"] = o.IfExists
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssistantCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"graph_id",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varAssistantCreate := _AssistantCreate{}

	err = json.Unmarshal(data, &varAssistantCreate)

	if err != nil {
		return err
	}

	*o = AssistantCreate(varAssistantCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assistant_id")
		delete(additionalProperties, "graph_id")
		delete(additionalProperties, "config")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "if_exists")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssistantCreate struct {
	value *AssistantCreate
	isSet bool
}

func (v NullableAssistantCreate) Get() *AssistantCreate {
	return v.value
}

func (v *NullableAssistantCreate) Set(val *AssistantCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantCreate(val *AssistantCreate) *NullableAssistantCreate {
	return &NullableAssistantCreate{value: val, isSet: true}
}

func (v NullableAssistantCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


