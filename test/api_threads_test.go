/*
LangGraph Platform

Testing ThreadsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package langgraphgo_test

import (
	"context"
	"testing"

	"github.com/chelala/langgraphgo"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_langgraphgo_ThreadsAPIService(t *testing.T) {

	configuration := langgraphgo.NewConfiguration()
	configuration.Servers = langgraphgo.ServerConfigurations{
		{
			URL:         "http://127.0.0.1:2024",
			Description: "local running server",
		},
	}
	apiClient := langgraphgo.NewAPIClient(configuration)

	t.Run("Test ThreadsAPIService CopyThreadPostThreadsThreadIdCopyPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.CopyThreadPostThreadsThreadIdCopyPost(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService CreateThreadThreadsPost", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		req := apiClient.ThreadsAPI.CreateThreadThreadsPost(context.Background())
		threadCreateReq := req.ThreadCreate(langgraphgo.ThreadCreate{})
		resp, httpRes, err := threadCreateReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService DeleteThreadThreadsThreadIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.DeleteThreadThreadsThreadIdDelete(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService GetLatestThreadStateThreadsThreadIdStateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.GetLatestThreadStateThreadsThreadIdStateGet(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService GetThreadHistoryPostThreadsThreadIdHistoryPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.GetThreadHistoryPostThreadsThreadIdHistoryPost(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService GetThreadHistoryThreadsThreadIdHistoryGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.GetThreadHistoryThreadsThreadIdHistoryGet(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService GetThreadThreadsThreadIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.GetThreadThreadsThreadIdGet(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService PatchThreadThreadsThreadIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.PatchThreadThreadsThreadIdPatch(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService PostThreadStateAtCheckpointThreadsThreadIdStateCheckpointIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ThreadsAPI.PostThreadStateAtCheckpointThreadsThreadIdStateCheckpointIdGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService SearchThreadsThreadsSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ThreadsAPI.SearchThreadsThreadsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadsAPIService UpdateThreadStateThreadsThreadIdStatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadsAPI.UpdateThreadStateThreadsThreadIdStatePost(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
