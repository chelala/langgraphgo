/*
LangGraph Platform

Testing ThreadRunsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package langgraphgo

import (
	"context"
	"testing"

	openapiclient "github.com/chelala/langgraphgo"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_langgraphgo_ThreadRunsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ThreadRunsAPIService CancelRunHttpThreadsThreadIdRunsRunIdCancelPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string
		var runId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.CancelRunHttpThreadsThreadIdRunsRunIdCancelPost(context.Background(), threadId, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService CreateRunThreadsThreadIdRunsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.CreateRunThreadsThreadIdRunsPost(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService DeleteRunThreadsThreadIdRunsRunIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string
		var runId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.DeleteRunThreadsThreadIdRunsRunIdDelete(context.Background(), threadId, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService GetRunHttpThreadsThreadIdRunsRunIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string
		var runId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.GetRunHttpThreadsThreadIdRunsRunIdGet(context.Background(), threadId, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService JoinRunHttpThreadsThreadIdRunsRunIdJoinGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string
		var runId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.JoinRunHttpThreadsThreadIdRunsRunIdJoinGet(context.Background(), threadId, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService ListRunsHttpThreadsThreadIdRunsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.ListRunsHttpThreadsThreadIdRunsGet(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService StreamRunHttpThreadsThreadIdRunsRunIdJoinGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string
		var runId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.StreamRunHttpThreadsThreadIdRunsRunIdJoinGet(context.Background(), threadId, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService StreamRunThreadsThreadIdRunsStreamPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.StreamRunThreadsThreadIdRunsStreamPost(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ThreadRunsAPIService WaitRunThreadsThreadIdRunsWaitPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var threadId string

		resp, httpRes, err := apiClient.ThreadRunsAPI.WaitRunThreadsThreadIdRunsWaitPost(context.Background(), threadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
