/*
LangGraph Platform

Testing AssistantsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package langgraphgo

import (
	"context"
	"testing"

	"github.com/chelala/langgraphgo"
	openapiclient "github.com/chelala/langgraphgo"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_langgraphgo_AssistantsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssistantsAPIService CreateAssistantAssistantsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AssistantsAPI.CreateAssistantAssistantsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService DeleteAssistantAssistantsAssistantIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.DeleteAssistantAssistantsAssistantIdDelete(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantAssistantsAssistantIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantAssistantsAssistantIdGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantGraphAssistantsAssistantIdGraphGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId langgraphgo.GetAssistantGraphAssistantsAssistantIdGraphGetAssistantIdParameter

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantGraphAssistantsAssistantIdGraphGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantSchemasAssistantsAssistantIdSchemasGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantSchemasAssistantsAssistantIdSchemasGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantSubgraphsAssistantsAssistantIdSubgraphsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantSubgraphsAssistantsAssistantIdSubgraphsGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantSubgraphsAssistantsAssistantIdSubgraphsNamespaceGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string
		var namespace string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantSubgraphsAssistantsAssistantIdSubgraphsNamespaceGet(context.Background(), assistantId, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantVersionsAssistantsAssistantIdVersionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantVersionsAssistantsAssistantIdVersionsGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService PatchAssistantAssistantsAssistantIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.PatchAssistantAssistantsAssistantIdPatch(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService SearchAssistantsAssistantsSearchPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AssistantsAPI.SearchAssistantsAssistantsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService SetLatestAssistantVersionAssistantsAssistantIdVersionsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.SetLatestAssistantVersionAssistantsAssistantIdVersionsPost(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
