/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Assistant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assistant{}

// Assistant struct for Assistant
type Assistant struct {
	// The ID of the assistant.
	AssistantId string `json:"assistant_id"`
	// The ID of the graph.
	GraphId string `json:"graph_id"`
	Config Config1 `json:"config"`
	// The time the assistant was created.
	CreatedAt time.Time `json:"created_at"`
	// The last time the assistant was updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The assistant metadata.
	Metadata map[string]interface{} `json:"metadata"`
	// The version of the assistant
	Version *int32 `json:"version,omitempty"`
	// The name of the assistant
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Assistant Assistant

// NewAssistant instantiates a new Assistant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistant(assistantId string, graphId string, config Config1, createdAt time.Time, updatedAt time.Time, metadata map[string]interface{}) *Assistant {
	this := Assistant{}
	this.AssistantId = assistantId
	this.GraphId = graphId
	this.Config = config
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Metadata = metadata
	return &this
}

// NewAssistantWithDefaults instantiates a new Assistant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantWithDefaults() *Assistant {
	this := Assistant{}
	return &this
}

// GetAssistantId returns the AssistantId field value
func (o *Assistant) GetAssistantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetAssistantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *Assistant) SetAssistantId(v string) {
	o.AssistantId = v
}


// GetGraphId returns the GraphId field value
func (o *Assistant) GetGraphId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphId
}

// GetGraphIdOk returns a tuple with the GraphId field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetGraphIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphId, true
}

// SetGraphId sets field value
func (o *Assistant) SetGraphId(v string) {
	o.GraphId = v
}


// GetConfig returns the Config field value
func (o *Assistant) GetConfig() Config1 {
	if o == nil {
		var ret Config1
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetConfigOk() (*Config1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Assistant) SetConfig(v Config1) {
	o.Config = v
}


// GetCreatedAt returns the CreatedAt field value
func (o *Assistant) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Assistant) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}


// GetUpdatedAt returns the UpdatedAt field value
func (o *Assistant) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Assistant) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}


// GetMetadata returns the Metadata field value
func (o *Assistant) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Assistant) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}


// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Assistant) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Assistant) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *Assistant) SetVersion(v int32) {
	o.Version = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Assistant) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Assistant) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Assistant) SetName(v string) {
	o.Name = &v
}

func (o Assistant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assistant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assistant_id"] = o.AssistantId
	toSerialize["graph_id"] = o.GraphId
	toSerialize["config"] = o.Config
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Assistant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assistant_id",
		"graph_id",
		"config",
		"created_at",
		"updated_at",
		"metadata",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varAssistant := _Assistant{}

	err = json.Unmarshal(data, &varAssistant)

	if err != nil {
		return err
	}

	*o = Assistant(varAssistant)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assistant_id")
		delete(additionalProperties, "graph_id")
		delete(additionalProperties, "config")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "version")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssistant struct {
	value *Assistant
	isSet bool
}

func (v NullableAssistant) Get() *Assistant {
	return v.value
}

func (v *NullableAssistant) Set(val *Assistant) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistant) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistant(val *Assistant) *NullableAssistant {
	return &NullableAssistant{value: val, isSet: true}
}

func (v NullableAssistant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


