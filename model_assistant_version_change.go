/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the AssistantVersionChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantVersionChange{}

// AssistantVersionChange Payload for changing the version of an assistant.
type AssistantVersionChange struct {
	// The assistant version.
	Version *int32 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssistantVersionChange AssistantVersionChange

// NewAssistantVersionChange instantiates a new AssistantVersionChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantVersionChange() *AssistantVersionChange {
	this := AssistantVersionChange{}
	return &this
}

// NewAssistantVersionChangeWithDefaults instantiates a new AssistantVersionChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantVersionChangeWithDefaults() *AssistantVersionChange {
	this := AssistantVersionChange{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AssistantVersionChange) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantVersionChange) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AssistantVersionChange) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *AssistantVersionChange) SetVersion(v int32) {
	o.Version = &v
}

func (o AssistantVersionChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantVersionChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssistantVersionChange) UnmarshalJSON(data []byte) (err error) {
	varAssistantVersionChange := _AssistantVersionChange{}

	err = json.Unmarshal(data, &varAssistantVersionChange)

	if err != nil {
		return err
	}

	*o = AssistantVersionChange(varAssistantVersionChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssistantVersionChange struct {
	value *AssistantVersionChange
	isSet bool
}

func (v NullableAssistantVersionChange) Get() *AssistantVersionChange {
	return v.value
}

func (v *NullableAssistantVersionChange) Set(val *AssistantVersionChange) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantVersionChange) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantVersionChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantVersionChange(val *AssistantVersionChange) *NullableAssistantVersionChange {
	return &NullableAssistantVersionChange{value: val, isSet: true}
}

func (v NullableAssistantVersionChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantVersionChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


