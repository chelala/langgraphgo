/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the StoreSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreSearchRequest{}

// StoreSearchRequest Request to search for items within a namespace prefix.
type StoreSearchRequest struct {
	// List of strings representing the namespace prefix.
	NamespacePrefix []string `json:"namespace_prefix,omitempty"`
	// Optional dictionary of key-value pairs to filter results.
	Filter map[string]interface{} `json:"filter,omitempty"`
	// Maximum number of items to return (default is 10).
	Limit *int32 `json:"limit,omitempty"`
	// Number of items to skip before returning results (default is 0).
	Offset *int32 `json:"offset,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreSearchRequest StoreSearchRequest

// NewStoreSearchRequest instantiates a new StoreSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreSearchRequest() *StoreSearchRequest {
	this := StoreSearchRequest{}
	var limit int32 = 10
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// NewStoreSearchRequestWithDefaults instantiates a new StoreSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreSearchRequestWithDefaults() *StoreSearchRequest {
	this := StoreSearchRequest{}
	var limit int32 = 10
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// GetNamespacePrefix returns the NamespacePrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreSearchRequest) GetNamespacePrefix() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NamespacePrefix
}

// GetNamespacePrefixOk returns a tuple with the NamespacePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreSearchRequest) GetNamespacePrefixOk() ([]string, bool) {
	if o == nil || IsNil(o.NamespacePrefix) {
		return nil, false
	}
	return o.NamespacePrefix, true
}

// HasNamespacePrefix returns a boolean if a field has been set.
func (o *StoreSearchRequest) HasNamespacePrefix() bool {
	if o != nil && !IsNil(o.NamespacePrefix) {
		return true
	}

	return false
}

// SetNamespacePrefix gets a reference to the given []string and assigns it to the NamespacePrefix field.
func (o *StoreSearchRequest) SetNamespacePrefix(v []string) {
	o.NamespacePrefix = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *StoreSearchRequest) GetFilter() map[string]interface{} {
	if o == nil || IsNil(o.Filter) {
		var ret map[string]interface{}
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSearchRequest) GetFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filter) {
		return map[string]interface{}{}, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *StoreSearchRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given map[string]interface{} and assigns it to the Filter field.
func (o *StoreSearchRequest) SetFilter(v map[string]interface{}) {
	o.Filter = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *StoreSearchRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSearchRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *StoreSearchRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *StoreSearchRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *StoreSearchRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSearchRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *StoreSearchRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *StoreSearchRequest) SetOffset(v int32) {
	o.Offset = &v
}

func (o StoreSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NamespacePrefix != nil {
		toSerialize["namespace_prefix"] = o.NamespacePrefix
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoreSearchRequest) UnmarshalJSON(data []byte) (err error) {
	varStoreSearchRequest := _StoreSearchRequest{}

	err = json.Unmarshal(data, &varStoreSearchRequest)

	if err != nil {
		return err
	}

	*o = StoreSearchRequest(varStoreSearchRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "namespace_prefix")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "offset")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreSearchRequest struct {
	value *StoreSearchRequest
	isSet bool
}

func (v NullableStoreSearchRequest) Get() *StoreSearchRequest {
	return v.value
}

func (v *NullableStoreSearchRequest) Set(val *StoreSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreSearchRequest(val *StoreSearchRequest) *NullableStoreSearchRequest {
	return &NullableStoreSearchRequest{value: val, isSet: true}
}

func (v NullableStoreSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


