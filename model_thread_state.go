/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ThreadState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadState{}

// ThreadState struct for ThreadState
type ThreadState struct {
	Values Values `json:"values"`
	Next []string `json:"next"`
	Tasks []ThreadStateTasksInner `json:"tasks,omitempty"`
	Checkpoint CheckpointConfig `json:"checkpoint"`
	Metadata map[string]interface{} `json:"metadata"`
	CreatedAt string `json:"created_at"`
	ParentCheckpoint map[string]interface{} `json:"parent_checkpoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadState ThreadState

// NewThreadState instantiates a new ThreadState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadState(values Values, next []string, checkpoint CheckpointConfig, metadata map[string]interface{}, createdAt string) *ThreadState {
	this := ThreadState{}
	this.Values = values
	this.Next = next
	this.Checkpoint = checkpoint
	this.Metadata = metadata
	this.CreatedAt = createdAt
	return &this
}

// NewThreadStateWithDefaults instantiates a new ThreadState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadStateWithDefaults() *ThreadState {
	this := ThreadState{}
	return &this
}

// GetValues returns the Values field value
func (o *ThreadState) GetValues() Values {
	if o == nil {
		var ret Values
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *ThreadState) GetValuesOk() (*Values, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *ThreadState) SetValues(v Values) {
	o.Values = v
}


// GetNext returns the Next field value
func (o *ThreadState) GetNext() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *ThreadState) GetNextOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Next, true
}

// SetNext sets field value
func (o *ThreadState) SetNext(v []string) {
	o.Next = v
}


// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ThreadState) GetTasks() []ThreadStateTasksInner {
	if o == nil || IsNil(o.Tasks) {
		var ret []ThreadStateTasksInner
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadState) GetTasksOk() ([]ThreadStateTasksInner, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ThreadState) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ThreadStateTasksInner and assigns it to the Tasks field.
func (o *ThreadState) SetTasks(v []ThreadStateTasksInner) {
	o.Tasks = v
}

// GetCheckpoint returns the Checkpoint field value
func (o *ThreadState) GetCheckpoint() CheckpointConfig {
	if o == nil {
		var ret CheckpointConfig
		return ret
	}

	return o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value
// and a boolean to check if the value has been set.
func (o *ThreadState) GetCheckpointOk() (*CheckpointConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checkpoint, true
}

// SetCheckpoint sets field value
func (o *ThreadState) SetCheckpoint(v CheckpointConfig) {
	o.Checkpoint = v
}


// GetMetadata returns the Metadata field value
func (o *ThreadState) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ThreadState) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ThreadState) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}


// GetCreatedAt returns the CreatedAt field value
func (o *ThreadState) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ThreadState) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ThreadState) SetCreatedAt(v string) {
	o.CreatedAt = v
}


// GetParentCheckpoint returns the ParentCheckpoint field value if set, zero value otherwise.
func (o *ThreadState) GetParentCheckpoint() map[string]interface{} {
	if o == nil || IsNil(o.ParentCheckpoint) {
		var ret map[string]interface{}
		return ret
	}
	return o.ParentCheckpoint
}

// GetParentCheckpointOk returns a tuple with the ParentCheckpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadState) GetParentCheckpointOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ParentCheckpoint) {
		return map[string]interface{}{}, false
	}
	return o.ParentCheckpoint, true
}

// HasParentCheckpoint returns a boolean if a field has been set.
func (o *ThreadState) HasParentCheckpoint() bool {
	if o != nil && !IsNil(o.ParentCheckpoint) {
		return true
	}

	return false
}

// SetParentCheckpoint gets a reference to the given map[string]interface{} and assigns it to the ParentCheckpoint field.
func (o *ThreadState) SetParentCheckpoint(v map[string]interface{}) {
	o.ParentCheckpoint = v
}

func (o ThreadState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	toSerialize["next"] = o.Next
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	toSerialize["checkpoint"] = o.Checkpoint
	toSerialize["metadata"] = o.Metadata
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.ParentCheckpoint) {
		toSerialize["parent_checkpoint"] = o.ParentCheckpoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
		"next",
		"checkpoint",
		"metadata",
		"created_at",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varThreadState := _ThreadState{}

	err = json.Unmarshal(data, &varThreadState)

	if err != nil {
		return err
	}

	*o = ThreadState(varThreadState)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "values")
		delete(additionalProperties, "next")
		delete(additionalProperties, "tasks")
		delete(additionalProperties, "checkpoint")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "parent_checkpoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadState struct {
	value *ThreadState
	isSet bool
}

func (v NullableThreadState) Get() *ThreadState {
	return v.value
}

func (v *NullableThreadState) Set(val *ThreadState) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadState) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadState(val *ThreadState) *NullableThreadState {
	return &NullableThreadState{value: val, isSet: true}
}

func (v NullableThreadState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


