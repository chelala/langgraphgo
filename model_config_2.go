/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the Config2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config2{}

// Config2 The configuration for the assistant.
type Config2 struct {
	Tags []string `json:"tags,omitempty"`
	RecursionLimit *int32 `json:"recursion_limit,omitempty"`
	Configurable map[string]interface{} `json:"configurable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Config2 Config2

// NewConfig2 instantiates a new Config2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig2() *Config2 {
	this := Config2{}
	return &this
}

// NewConfig2WithDefaults instantiates a new Config2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfig2WithDefaults() *Config2 {
	this := Config2{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Config2) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config2) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Config2) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Config2) SetTags(v []string) {
	o.Tags = v
}

// GetRecursionLimit returns the RecursionLimit field value if set, zero value otherwise.
func (o *Config2) GetRecursionLimit() int32 {
	if o == nil || IsNil(o.RecursionLimit) {
		var ret int32
		return ret
	}
	return *o.RecursionLimit
}

// GetRecursionLimitOk returns a tuple with the RecursionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config2) GetRecursionLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RecursionLimit) {
		return nil, false
	}
	return o.RecursionLimit, true
}

// HasRecursionLimit returns a boolean if a field has been set.
func (o *Config2) HasRecursionLimit() bool {
	if o != nil && !IsNil(o.RecursionLimit) {
		return true
	}

	return false
}

// SetRecursionLimit gets a reference to the given int32 and assigns it to the RecursionLimit field.
func (o *Config2) SetRecursionLimit(v int32) {
	o.RecursionLimit = &v
}

// GetConfigurable returns the Configurable field value if set, zero value otherwise.
func (o *Config2) GetConfigurable() map[string]interface{} {
	if o == nil || IsNil(o.Configurable) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configurable
}

// GetConfigurableOk returns a tuple with the Configurable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config2) GetConfigurableOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configurable) {
		return map[string]interface{}{}, false
	}
	return o.Configurable, true
}

// HasConfigurable returns a boolean if a field has been set.
func (o *Config2) HasConfigurable() bool {
	if o != nil && !IsNil(o.Configurable) {
		return true
	}

	return false
}

// SetConfigurable gets a reference to the given map[string]interface{} and assigns it to the Configurable field.
func (o *Config2) SetConfigurable(v map[string]interface{}) {
	o.Configurable = v
}

func (o Config2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Config2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.RecursionLimit) {
		toSerialize["recursion_limit"] = o.RecursionLimit
	}
	if !IsNil(o.Configurable) {
		toSerialize["configurable"] = o.Configurable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Config2) UnmarshalJSON(data []byte) (err error) {
	varConfig2 := _Config2{}

	err = json.Unmarshal(data, &varConfig2)

	if err != nil {
		return err
	}

	*o = Config2(varConfig2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "recursion_limit")
		delete(additionalProperties, "configurable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfig2 struct {
	value *Config2
	isSet bool
}

func (v NullableConfig2) Get() *Config2 {
	return v.value
}

func (v *NullableConfig2) Set(val *Config2) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig2) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig2(val *Config2) *NullableConfig2 {
	return &NullableConfig2{value: val, isSet: true}
}

func (v NullableConfig2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


