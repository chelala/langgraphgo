/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the ThreadCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadCreate{}

// ThreadCreate Payload for creating a thread.
type ThreadCreate struct {
	// The ID of the thread. If not provided, a random UUID will be generated.
	ThreadId *string `json:"thread_id,omitempty"`
	// Metadata to add to thread.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).
	IfExists *string `json:"if_exists,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadCreate ThreadCreate

// NewThreadCreate instantiates a new ThreadCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadCreate() *ThreadCreate {
	this := ThreadCreate{}
	var ifExists string = "raise"
	this.IfExists = &ifExists
	return &this
}

// NewThreadCreateWithDefaults instantiates a new ThreadCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadCreateWithDefaults() *ThreadCreate {
	this := ThreadCreate{}
	var ifExists string = "raise"
	this.IfExists = &ifExists
	return &this
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *ThreadCreate) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadCreate) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *ThreadCreate) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *ThreadCreate) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ThreadCreate) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadCreate) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ThreadCreate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ThreadCreate) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetIfExists returns the IfExists field value if set, zero value otherwise.
func (o *ThreadCreate) GetIfExists() string {
	if o == nil || IsNil(o.IfExists) {
		var ret string
		return ret
	}
	return *o.IfExists
}

// GetIfExistsOk returns a tuple with the IfExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadCreate) GetIfExistsOk() (*string, bool) {
	if o == nil || IsNil(o.IfExists) {
		return nil, false
	}
	return o.IfExists, true
}

// HasIfExists returns a boolean if a field has been set.
func (o *ThreadCreate) HasIfExists() bool {
	if o != nil && !IsNil(o.IfExists) {
		return true
	}

	return false
}

// SetIfExists gets a reference to the given string and assigns it to the IfExists field.
func (o *ThreadCreate) SetIfExists(v string) {
	o.IfExists = &v
}

func (o ThreadCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ThreadId) {
		toSerialize["thread_id"] = o.ThreadId
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.IfExists) {
		toSerialize["if_exists"] = o.IfExists
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadCreate) UnmarshalJSON(data []byte) (err error) {
	varThreadCreate := _ThreadCreate{}

	err = json.Unmarshal(data, &varThreadCreate)

	if err != nil {
		return err
	}

	*o = ThreadCreate(varThreadCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "thread_id")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "if_exists")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadCreate struct {
	value *ThreadCreate
	isSet bool
}

func (v NullableThreadCreate) Get() *ThreadCreate {
	return v.value
}

func (v *NullableThreadCreate) Set(val *ThreadCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadCreate(val *ThreadCreate) *NullableThreadCreate {
	return &NullableThreadCreate{value: val, isSet: true}
}

func (v NullableThreadCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


