/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the ThreadStateUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadStateUpdate{}

// ThreadStateUpdate Payload for updating the state of a thread.
type ThreadStateUpdate struct {
	Values NullableValues1 `json:"values,omitempty"`
	// The checkpoint to update the state of.
	Checkpoint *CheckpointConfig `json:"checkpoint,omitempty"`
	// Update the state as if this node had just executed.
	AsNode *string `json:"as_node,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadStateUpdate ThreadStateUpdate

// NewThreadStateUpdate instantiates a new ThreadStateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadStateUpdate() *ThreadStateUpdate {
	this := ThreadStateUpdate{}
	return &this
}

// NewThreadStateUpdateWithDefaults instantiates a new ThreadStateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadStateUpdateWithDefaults() *ThreadStateUpdate {
	this := ThreadStateUpdate{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreadStateUpdate) GetValues() Values1 {
	if o == nil || IsNil(o.Values.Get()) {
		var ret Values1
		return ret
	}
	return *o.Values.Get()
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreadStateUpdate) GetValuesOk() (*Values1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values.Get(), o.Values.IsSet()
}

// HasValues returns a boolean if a field has been set.
func (o *ThreadStateUpdate) HasValues() bool {
	if o != nil && o.Values.IsSet() {
		return true
	}

	return false
}

// SetValues gets a reference to the given NullableValues1 and assigns it to the Values field.
func (o *ThreadStateUpdate) SetValues(v Values1) {
	o.Values.Set(&v)
}
// SetValuesNil sets the value for Values to be an explicit nil
func (o *ThreadStateUpdate) SetValuesNil() {
	o.Values.Set(nil)
}

// UnsetValues ensures that no value is present for Values, not even an explicit nil
func (o *ThreadStateUpdate) UnsetValues() {
	o.Values.Unset()
}

// GetCheckpoint returns the Checkpoint field value if set, zero value otherwise.
func (o *ThreadStateUpdate) GetCheckpoint() CheckpointConfig {
	if o == nil || IsNil(o.Checkpoint) {
		var ret CheckpointConfig
		return ret
	}
	return *o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateUpdate) GetCheckpointOk() (*CheckpointConfig, bool) {
	if o == nil || IsNil(o.Checkpoint) {
		return nil, false
	}
	return o.Checkpoint, true
}

// HasCheckpoint returns a boolean if a field has been set.
func (o *ThreadStateUpdate) HasCheckpoint() bool {
	if o != nil && !IsNil(o.Checkpoint) {
		return true
	}

	return false
}

// SetCheckpoint gets a reference to the given CheckpointConfig and assigns it to the Checkpoint field.
func (o *ThreadStateUpdate) SetCheckpoint(v CheckpointConfig) {
	o.Checkpoint = &v
}

// GetAsNode returns the AsNode field value if set, zero value otherwise.
func (o *ThreadStateUpdate) GetAsNode() string {
	if o == nil || IsNil(o.AsNode) {
		var ret string
		return ret
	}
	return *o.AsNode
}

// GetAsNodeOk returns a tuple with the AsNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateUpdate) GetAsNodeOk() (*string, bool) {
	if o == nil || IsNil(o.AsNode) {
		return nil, false
	}
	return o.AsNode, true
}

// HasAsNode returns a boolean if a field has been set.
func (o *ThreadStateUpdate) HasAsNode() bool {
	if o != nil && !IsNil(o.AsNode) {
		return true
	}

	return false
}

// SetAsNode gets a reference to the given string and assigns it to the AsNode field.
func (o *ThreadStateUpdate) SetAsNode(v string) {
	o.AsNode = &v
}

func (o ThreadStateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadStateUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Values.IsSet() {
		toSerialize["values"] = o.Values.Get()
	}
	if !IsNil(o.Checkpoint) {
		toSerialize["checkpoint"] = o.Checkpoint
	}
	if !IsNil(o.AsNode) {
		toSerialize["as_node"] = o.AsNode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadStateUpdate) UnmarshalJSON(data []byte) (err error) {
	varThreadStateUpdate := _ThreadStateUpdate{}

	err = json.Unmarshal(data, &varThreadStateUpdate)

	if err != nil {
		return err
	}

	*o = ThreadStateUpdate(varThreadStateUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "values")
		delete(additionalProperties, "checkpoint")
		delete(additionalProperties, "as_node")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadStateUpdate struct {
	value *ThreadStateUpdate
	isSet bool
}

func (v NullableThreadStateUpdate) Get() *ThreadStateUpdate {
	return v.value
}

func (v *NullableThreadStateUpdate) Set(val *ThreadStateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadStateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadStateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadStateUpdate(val *ThreadStateUpdate) *NullableThreadStateUpdate {
	return &NullableThreadStateUpdate{value: val, isSet: true}
}

func (v NullableThreadStateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadStateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


