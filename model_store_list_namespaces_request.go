/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
)

// checks if the StoreListNamespacesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreListNamespacesRequest{}

// StoreListNamespacesRequest struct for StoreListNamespacesRequest
type StoreListNamespacesRequest struct {
	// Optional list of strings representing the prefix to filter namespaces.
	Prefix []string `json:"prefix,omitempty"`
	// Optional list of strings representing the suffix to filter namespaces.
	Suffix []string `json:"suffix,omitempty"`
	// Optional integer specifying the maximum depth of namespaces to return.
	MaxDepth *int32 `json:"max_depth,omitempty"`
	// Maximum number of namespaces to return (default is 100).
	Limit *int32 `json:"limit,omitempty"`
	// Number of namespaces to skip before returning results (default is 0).
	Offset *int32 `json:"offset,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreListNamespacesRequest StoreListNamespacesRequest

// NewStoreListNamespacesRequest instantiates a new StoreListNamespacesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreListNamespacesRequest() *StoreListNamespacesRequest {
	this := StoreListNamespacesRequest{}
	var limit int32 = 100
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// NewStoreListNamespacesRequestWithDefaults instantiates a new StoreListNamespacesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreListNamespacesRequestWithDefaults() *StoreListNamespacesRequest {
	this := StoreListNamespacesRequest{}
	var limit int32 = 100
	this.Limit = &limit
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *StoreListNamespacesRequest) GetPrefix() []string {
	if o == nil || IsNil(o.Prefix) {
		var ret []string
		return ret
	}
	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreListNamespacesRequest) GetPrefixOk() ([]string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *StoreListNamespacesRequest) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given []string and assigns it to the Prefix field.
func (o *StoreListNamespacesRequest) SetPrefix(v []string) {
	o.Prefix = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise.
func (o *StoreListNamespacesRequest) GetSuffix() []string {
	if o == nil || IsNil(o.Suffix) {
		var ret []string
		return ret
	}
	return o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreListNamespacesRequest) GetSuffixOk() ([]string, bool) {
	if o == nil || IsNil(o.Suffix) {
		return nil, false
	}
	return o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *StoreListNamespacesRequest) HasSuffix() bool {
	if o != nil && !IsNil(o.Suffix) {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given []string and assigns it to the Suffix field.
func (o *StoreListNamespacesRequest) SetSuffix(v []string) {
	o.Suffix = v
}

// GetMaxDepth returns the MaxDepth field value if set, zero value otherwise.
func (o *StoreListNamespacesRequest) GetMaxDepth() int32 {
	if o == nil || IsNil(o.MaxDepth) {
		var ret int32
		return ret
	}
	return *o.MaxDepth
}

// GetMaxDepthOk returns a tuple with the MaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreListNamespacesRequest) GetMaxDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDepth) {
		return nil, false
	}
	return o.MaxDepth, true
}

// HasMaxDepth returns a boolean if a field has been set.
func (o *StoreListNamespacesRequest) HasMaxDepth() bool {
	if o != nil && !IsNil(o.MaxDepth) {
		return true
	}

	return false
}

// SetMaxDepth gets a reference to the given int32 and assigns it to the MaxDepth field.
func (o *StoreListNamespacesRequest) SetMaxDepth(v int32) {
	o.MaxDepth = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *StoreListNamespacesRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreListNamespacesRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *StoreListNamespacesRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *StoreListNamespacesRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *StoreListNamespacesRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreListNamespacesRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *StoreListNamespacesRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *StoreListNamespacesRequest) SetOffset(v int32) {
	o.Offset = &v
}

func (o StoreListNamespacesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreListNamespacesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Suffix) {
		toSerialize["suffix"] = o.Suffix
	}
	if !IsNil(o.MaxDepth) {
		toSerialize["max_depth"] = o.MaxDepth
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoreListNamespacesRequest) UnmarshalJSON(data []byte) (err error) {
	varStoreListNamespacesRequest := _StoreListNamespacesRequest{}

	err = json.Unmarshal(data, &varStoreListNamespacesRequest)

	if err != nil {
		return err
	}

	*o = StoreListNamespacesRequest(varStoreListNamespacesRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "suffix")
		delete(additionalProperties, "max_depth")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "offset")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreListNamespacesRequest struct {
	value *StoreListNamespacesRequest
	isSet bool
}

func (v NullableStoreListNamespacesRequest) Get() *StoreListNamespacesRequest {
	return v.value
}

func (v *NullableStoreListNamespacesRequest) Set(val *StoreListNamespacesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreListNamespacesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreListNamespacesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreListNamespacesRequest(val *StoreListNamespacesRequest) *NullableStoreListNamespacesRequest {
	return &NullableStoreListNamespacesRequest{value: val, isSet: true}
}

func (v NullableStoreListNamespacesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreListNamespacesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


