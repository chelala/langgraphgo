/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the CronCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CronCreate{}

// CronCreate Payload for creating a cron job.
type CronCreate struct {
	// The cron schedule to execute this job on.
	Schedule string `json:"schedule"`
	AssistantId CronCreateAssistantId `json:"assistant_id"`
	Input *Input `json:"input,omitempty"`
	// Metadata to assign to the cron job runs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Config *Config2 `json:"config,omitempty"`
	// Webhook to call after LangGraph API call is done.
	Webhook *string `json:"webhook,omitempty"`
	InterruptBefore *InterruptBefore `json:"interrupt_before,omitempty"`
	InterruptAfter *InterruptAfter `json:"interrupt_after,omitempty"`
	// Multitask strategy to use. Must be one of 'reject', 'interrupt', 'rollback', or 'enqueue'.
	MultitaskStrategy *string `json:"multitask_strategy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CronCreate CronCreate

// NewCronCreate instantiates a new CronCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronCreate(schedule string, assistantId CronCreateAssistantId) *CronCreate {
	this := CronCreate{}
	this.Schedule = schedule
	this.AssistantId = assistantId
	var multitaskStrategy string = "reject"
	this.MultitaskStrategy = &multitaskStrategy
	return &this
}

// NewCronCreateWithDefaults instantiates a new CronCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronCreateWithDefaults() *CronCreate {
	this := CronCreate{}
	var multitaskStrategy string = "reject"
	this.MultitaskStrategy = &multitaskStrategy
	return &this
}

// GetSchedule returns the Schedule field value
func (o *CronCreate) GetSchedule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *CronCreate) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *CronCreate) SetSchedule(v string) {
	o.Schedule = v
}


// GetAssistantId returns the AssistantId field value
func (o *CronCreate) GetAssistantId() CronCreateAssistantId {
	if o == nil {
		var ret CronCreateAssistantId
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *CronCreate) GetAssistantIdOk() (*CronCreateAssistantId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *CronCreate) SetAssistantId(v CronCreateAssistantId) {
	o.AssistantId = v
}


// GetInput returns the Input field value if set, zero value otherwise.
func (o *CronCreate) GetInput() Input {
	if o == nil || IsNil(o.Input) {
		var ret Input
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetInputOk() (*Input, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *CronCreate) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given Input and assigns it to the Input field.
func (o *CronCreate) SetInput(v Input) {
	o.Input = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CronCreate) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CronCreate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CronCreate) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CronCreate) GetConfig() Config2 {
	if o == nil || IsNil(o.Config) {
		var ret Config2
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetConfigOk() (*Config2, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CronCreate) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given Config2 and assigns it to the Config field.
func (o *CronCreate) SetConfig(v Config2) {
	o.Config = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *CronCreate) GetWebhook() string {
	if o == nil || IsNil(o.Webhook) {
		var ret string
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetWebhookOk() (*string, bool) {
	if o == nil || IsNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *CronCreate) HasWebhook() bool {
	if o != nil && !IsNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given string and assigns it to the Webhook field.
func (o *CronCreate) SetWebhook(v string) {
	o.Webhook = &v
}

// GetInterruptBefore returns the InterruptBefore field value if set, zero value otherwise.
func (o *CronCreate) GetInterruptBefore() InterruptBefore {
	if o == nil || IsNil(o.InterruptBefore) {
		var ret InterruptBefore
		return ret
	}
	return *o.InterruptBefore
}

// GetInterruptBeforeOk returns a tuple with the InterruptBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetInterruptBeforeOk() (*InterruptBefore, bool) {
	if o == nil || IsNil(o.InterruptBefore) {
		return nil, false
	}
	return o.InterruptBefore, true
}

// HasInterruptBefore returns a boolean if a field has been set.
func (o *CronCreate) HasInterruptBefore() bool {
	if o != nil && !IsNil(o.InterruptBefore) {
		return true
	}

	return false
}

// SetInterruptBefore gets a reference to the given InterruptBefore and assigns it to the InterruptBefore field.
func (o *CronCreate) SetInterruptBefore(v InterruptBefore) {
	o.InterruptBefore = &v
}

// GetInterruptAfter returns the InterruptAfter field value if set, zero value otherwise.
func (o *CronCreate) GetInterruptAfter() InterruptAfter {
	if o == nil || IsNil(o.InterruptAfter) {
		var ret InterruptAfter
		return ret
	}
	return *o.InterruptAfter
}

// GetInterruptAfterOk returns a tuple with the InterruptAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetInterruptAfterOk() (*InterruptAfter, bool) {
	if o == nil || IsNil(o.InterruptAfter) {
		return nil, false
	}
	return o.InterruptAfter, true
}

// HasInterruptAfter returns a boolean if a field has been set.
func (o *CronCreate) HasInterruptAfter() bool {
	if o != nil && !IsNil(o.InterruptAfter) {
		return true
	}

	return false
}

// SetInterruptAfter gets a reference to the given InterruptAfter and assigns it to the InterruptAfter field.
func (o *CronCreate) SetInterruptAfter(v InterruptAfter) {
	o.InterruptAfter = &v
}

// GetMultitaskStrategy returns the MultitaskStrategy field value if set, zero value otherwise.
func (o *CronCreate) GetMultitaskStrategy() string {
	if o == nil || IsNil(o.MultitaskStrategy) {
		var ret string
		return ret
	}
	return *o.MultitaskStrategy
}

// GetMultitaskStrategyOk returns a tuple with the MultitaskStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronCreate) GetMultitaskStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.MultitaskStrategy) {
		return nil, false
	}
	return o.MultitaskStrategy, true
}

// HasMultitaskStrategy returns a boolean if a field has been set.
func (o *CronCreate) HasMultitaskStrategy() bool {
	if o != nil && !IsNil(o.MultitaskStrategy) {
		return true
	}

	return false
}

// SetMultitaskStrategy gets a reference to the given string and assigns it to the MultitaskStrategy field.
func (o *CronCreate) SetMultitaskStrategy(v string) {
	o.MultitaskStrategy = &v
}

func (o CronCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CronCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schedule"] = o.Schedule
	toSerialize["assistant_id"] = o.AssistantId
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}
	if !IsNil(o.InterruptBefore) {
		toSerialize["interrupt_before"] = o.InterruptBefore
	}
	if !IsNil(o.InterruptAfter) {
		toSerialize["interrupt_after"] = o.InterruptAfter
	}
	if !IsNil(o.MultitaskStrategy) {
		toSerialize["multitask_strategy"] = o.MultitaskStrategy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CronCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schedule",
		"assistant_id",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varCronCreate := _CronCreate{}

	err = json.Unmarshal(data, &varCronCreate)

	if err != nil {
		return err
	}

	*o = CronCreate(varCronCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "assistant_id")
		delete(additionalProperties, "input")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "config")
		delete(additionalProperties, "webhook")
		delete(additionalProperties, "interrupt_before")
		delete(additionalProperties, "interrupt_after")
		delete(additionalProperties, "multitask_strategy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCronCreate struct {
	value *CronCreate
	isSet bool
}

func (v NullableCronCreate) Get() *CronCreate {
	return v.value
}

func (v *NullableCronCreate) Set(val *CronCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableCronCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableCronCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronCreate(val *CronCreate) *NullableCronCreate {
	return &NullableCronCreate{value: val, isSet: true}
}

func (v NullableCronCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


