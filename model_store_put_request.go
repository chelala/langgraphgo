/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the StorePutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorePutRequest{}

// StorePutRequest Request to store or update an item.
type StorePutRequest struct {
	// A list of strings representing the namespace path.
	Namespace []string `json:"namespace"`
	// The unique identifier for the item within the namespace.
	Key string `json:"key"`
	// A dictionary containing the item's data.
	Value map[string]interface{} `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _StorePutRequest StorePutRequest

// NewStorePutRequest instantiates a new StorePutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorePutRequest(namespace []string, key string, value map[string]interface{}) *StorePutRequest {
	this := StorePutRequest{}
	this.Namespace = namespace
	this.Key = key
	this.Value = value
	return &this
}

// NewStorePutRequestWithDefaults instantiates a new StorePutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorePutRequestWithDefaults() *StorePutRequest {
	this := StorePutRequest{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *StorePutRequest) GetNamespace() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *StorePutRequest) GetNamespaceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace, true
}

// SetNamespace sets field value
func (o *StorePutRequest) SetNamespace(v []string) {
	o.Namespace = v
}


// GetKey returns the Key field value
func (o *StorePutRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *StorePutRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *StorePutRequest) SetKey(v string) {
	o.Key = v
}


// GetValue returns the Value field value
func (o *StorePutRequest) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *StorePutRequest) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *StorePutRequest) SetValue(v map[string]interface{}) {
	o.Value = v
}


func (o StorePutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorePutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorePutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
		"key",
		"value",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varStorePutRequest := _StorePutRequest{}

	err = json.Unmarshal(data, &varStorePutRequest)

	if err != nil {
		return err
	}

	*o = StorePutRequest(varStorePutRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorePutRequest struct {
	value *StorePutRequest
	isSet bool
}

func (v NullableStorePutRequest) Get() *StorePutRequest {
	return v.value
}

func (v *NullableStorePutRequest) Set(val *StorePutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStorePutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStorePutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorePutRequest(val *StorePutRequest) *NullableStorePutRequest {
	return &NullableStorePutRequest{value: val, isSet: true}
}

func (v NullableStorePutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorePutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


