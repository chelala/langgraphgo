/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the RunCreateStateless type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunCreateStateless{}

// RunCreateStateless Payload for creating a run.
type RunCreateStateless struct {
	AssistantId RunCreateStatefulAssistantId `json:"assistant_id"`
	Input NullableInput1 `json:"input,omitempty"`
	Command NullableCommand `json:"command,omitempty"`
	// Metadata to assign to the run.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Config *Config2 `json:"config,omitempty"`
	// Webhook to call after LangGraph API call is done.
	Webhook *string `json:"webhook,omitempty"`
	InterruptBefore *InterruptBefore `json:"interrupt_before,omitempty"`
	InterruptAfter *InterruptAfter `json:"interrupt_after,omitempty"`
	StreamMode *StreamMode `json:"stream_mode,omitempty"`
	// Feedback keys to assign to run.
	FeedbackKeys []string `json:"feedback_keys,omitempty"`
	// Whether to stream output from subgraphs.
	StreamSubgraphs *bool `json:"stream_subgraphs,omitempty"`
	// Whether to delete or keep the thread created for a stateless run. Must be one of 'delete' or 'keep'.
	OnCompletion *string `json:"on_completion,omitempty"`
	// The disconnect mode to use. Must be one of 'cancel' or 'continue'.
	OnDisconnect *string `json:"on_disconnect,omitempty"`
	// The number of seconds to wait before starting the run. Use to schedule future runs.
	AfterSeconds *int32 `json:"after_seconds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RunCreateStateless RunCreateStateless

// NewRunCreateStateless instantiates a new RunCreateStateless object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunCreateStateless(assistantId RunCreateStatefulAssistantId) *RunCreateStateless {
	this := RunCreateStateless{}
	this.AssistantId = assistantId
	defaultValue := "values"
	var streamMode StreamMode = StreamMode{
		String: &defaultValue,
	}
	this.StreamMode = &streamMode
	var streamSubgraphs bool = false
	this.StreamSubgraphs = &streamSubgraphs
	var onCompletion string = "delete"
	this.OnCompletion = &onCompletion
	var onDisconnect string = "cancel"
	this.OnDisconnect = &onDisconnect
	return &this
}

// NewRunCreateStatelessWithDefaults instantiates a new RunCreateStateless object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunCreateStatelessWithDefaults() *RunCreateStateless {
	this := RunCreateStateless{}
	defaultValue := "values"
	var streamMode StreamMode = StreamMode{
		String: &defaultValue,
	}
	this.StreamMode = &streamMode
	var streamSubgraphs bool = false
	this.StreamSubgraphs = &streamSubgraphs
	var onCompletion string = "delete"
	this.OnCompletion = &onCompletion
	var onDisconnect string = "cancel"
	this.OnDisconnect = &onDisconnect
	return &this
}

// GetAssistantId returns the AssistantId field value
func (o *RunCreateStateless) GetAssistantId() RunCreateStatefulAssistantId {
	if o == nil {
		var ret RunCreateStatefulAssistantId
		return ret
	}

	return o.AssistantId
}

// GetAssistantIdOk returns a tuple with the AssistantId field value
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetAssistantIdOk() (*RunCreateStatefulAssistantId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssistantId, true
}

// SetAssistantId sets field value
func (o *RunCreateStateless) SetAssistantId(v RunCreateStatefulAssistantId) {
	o.AssistantId = v
}


// GetInput returns the Input field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunCreateStateless) GetInput() Input1 {
	if o == nil || IsNil(o.Input.Get()) {
		var ret Input1
		return ret
	}
	return *o.Input.Get()
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunCreateStateless) GetInputOk() (*Input1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Input.Get(), o.Input.IsSet()
}

// HasInput returns a boolean if a field has been set.
func (o *RunCreateStateless) HasInput() bool {
	if o != nil && o.Input.IsSet() {
		return true
	}

	return false
}

// SetInput gets a reference to the given NullableInput1 and assigns it to the Input field.
func (o *RunCreateStateless) SetInput(v Input1) {
	o.Input.Set(&v)
}
// SetInputNil sets the value for Input to be an explicit nil
func (o *RunCreateStateless) SetInputNil() {
	o.Input.Set(nil)
}

// UnsetInput ensures that no value is present for Input, not even an explicit nil
func (o *RunCreateStateless) UnsetInput() {
	o.Input.Unset()
}

// GetCommand returns the Command field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunCreateStateless) GetCommand() Command {
	if o == nil || IsNil(o.Command.Get()) {
		var ret Command
		return ret
	}
	return *o.Command.Get()
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunCreateStateless) GetCommandOk() (*Command, bool) {
	if o == nil {
		return nil, false
	}
	return o.Command.Get(), o.Command.IsSet()
}

// HasCommand returns a boolean if a field has been set.
func (o *RunCreateStateless) HasCommand() bool {
	if o != nil && o.Command.IsSet() {
		return true
	}

	return false
}

// SetCommand gets a reference to the given NullableCommand and assigns it to the Command field.
func (o *RunCreateStateless) SetCommand(v Command) {
	o.Command.Set(&v)
}
// SetCommandNil sets the value for Command to be an explicit nil
func (o *RunCreateStateless) SetCommandNil() {
	o.Command.Set(nil)
}

// UnsetCommand ensures that no value is present for Command, not even an explicit nil
func (o *RunCreateStateless) UnsetCommand() {
	o.Command.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RunCreateStateless) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RunCreateStateless) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *RunCreateStateless) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *RunCreateStateless) GetConfig() Config2 {
	if o == nil || IsNil(o.Config) {
		var ret Config2
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetConfigOk() (*Config2, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *RunCreateStateless) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given Config2 and assigns it to the Config field.
func (o *RunCreateStateless) SetConfig(v Config2) {
	o.Config = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *RunCreateStateless) GetWebhook() string {
	if o == nil || IsNil(o.Webhook) {
		var ret string
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetWebhookOk() (*string, bool) {
	if o == nil || IsNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *RunCreateStateless) HasWebhook() bool {
	if o != nil && !IsNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given string and assigns it to the Webhook field.
func (o *RunCreateStateless) SetWebhook(v string) {
	o.Webhook = &v
}

// GetInterruptBefore returns the InterruptBefore field value if set, zero value otherwise.
func (o *RunCreateStateless) GetInterruptBefore() InterruptBefore {
	if o == nil || IsNil(o.InterruptBefore) {
		var ret InterruptBefore
		return ret
	}
	return *o.InterruptBefore
}

// GetInterruptBeforeOk returns a tuple with the InterruptBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetInterruptBeforeOk() (*InterruptBefore, bool) {
	if o == nil || IsNil(o.InterruptBefore) {
		return nil, false
	}
	return o.InterruptBefore, true
}

// HasInterruptBefore returns a boolean if a field has been set.
func (o *RunCreateStateless) HasInterruptBefore() bool {
	if o != nil && !IsNil(o.InterruptBefore) {
		return true
	}

	return false
}

// SetInterruptBefore gets a reference to the given InterruptBefore and assigns it to the InterruptBefore field.
func (o *RunCreateStateless) SetInterruptBefore(v InterruptBefore) {
	o.InterruptBefore = &v
}

// GetInterruptAfter returns the InterruptAfter field value if set, zero value otherwise.
func (o *RunCreateStateless) GetInterruptAfter() InterruptAfter {
	if o == nil || IsNil(o.InterruptAfter) {
		var ret InterruptAfter
		return ret
	}
	return *o.InterruptAfter
}

// GetInterruptAfterOk returns a tuple with the InterruptAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetInterruptAfterOk() (*InterruptAfter, bool) {
	if o == nil || IsNil(o.InterruptAfter) {
		return nil, false
	}
	return o.InterruptAfter, true
}

// HasInterruptAfter returns a boolean if a field has been set.
func (o *RunCreateStateless) HasInterruptAfter() bool {
	if o != nil && !IsNil(o.InterruptAfter) {
		return true
	}

	return false
}

// SetInterruptAfter gets a reference to the given InterruptAfter and assigns it to the InterruptAfter field.
func (o *RunCreateStateless) SetInterruptAfter(v InterruptAfter) {
	o.InterruptAfter = &v
}

// GetStreamMode returns the StreamMode field value if set, zero value otherwise.
func (o *RunCreateStateless) GetStreamMode() StreamMode {
	if o == nil || IsNil(o.StreamMode) {
		var ret StreamMode
		return ret
	}
	return *o.StreamMode
}

// GetStreamModeOk returns a tuple with the StreamMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetStreamModeOk() (*StreamMode, bool) {
	if o == nil || IsNil(o.StreamMode) {
		return nil, false
	}
	return o.StreamMode, true
}

// HasStreamMode returns a boolean if a field has been set.
func (o *RunCreateStateless) HasStreamMode() bool {
	if o != nil && !IsNil(o.StreamMode) {
		return true
	}

	return false
}

// SetStreamMode gets a reference to the given StreamMode and assigns it to the StreamMode field.
func (o *RunCreateStateless) SetStreamMode(v StreamMode) {
	o.StreamMode = &v
}

// GetFeedbackKeys returns the FeedbackKeys field value if set, zero value otherwise.
func (o *RunCreateStateless) GetFeedbackKeys() []string {
	if o == nil || IsNil(o.FeedbackKeys) {
		var ret []string
		return ret
	}
	return o.FeedbackKeys
}

// GetFeedbackKeysOk returns a tuple with the FeedbackKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetFeedbackKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.FeedbackKeys) {
		return nil, false
	}
	return o.FeedbackKeys, true
}

// HasFeedbackKeys returns a boolean if a field has been set.
func (o *RunCreateStateless) HasFeedbackKeys() bool {
	if o != nil && !IsNil(o.FeedbackKeys) {
		return true
	}

	return false
}

// SetFeedbackKeys gets a reference to the given []string and assigns it to the FeedbackKeys field.
func (o *RunCreateStateless) SetFeedbackKeys(v []string) {
	o.FeedbackKeys = v
}

// GetStreamSubgraphs returns the StreamSubgraphs field value if set, zero value otherwise.
func (o *RunCreateStateless) GetStreamSubgraphs() bool {
	if o == nil || IsNil(o.StreamSubgraphs) {
		var ret bool
		return ret
	}
	return *o.StreamSubgraphs
}

// GetStreamSubgraphsOk returns a tuple with the StreamSubgraphs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetStreamSubgraphsOk() (*bool, bool) {
	if o == nil || IsNil(o.StreamSubgraphs) {
		return nil, false
	}
	return o.StreamSubgraphs, true
}

// HasStreamSubgraphs returns a boolean if a field has been set.
func (o *RunCreateStateless) HasStreamSubgraphs() bool {
	if o != nil && !IsNil(o.StreamSubgraphs) {
		return true
	}

	return false
}

// SetStreamSubgraphs gets a reference to the given bool and assigns it to the StreamSubgraphs field.
func (o *RunCreateStateless) SetStreamSubgraphs(v bool) {
	o.StreamSubgraphs = &v
}

// GetOnCompletion returns the OnCompletion field value if set, zero value otherwise.
func (o *RunCreateStateless) GetOnCompletion() string {
	if o == nil || IsNil(o.OnCompletion) {
		var ret string
		return ret
	}
	return *o.OnCompletion
}

// GetOnCompletionOk returns a tuple with the OnCompletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetOnCompletionOk() (*string, bool) {
	if o == nil || IsNil(o.OnCompletion) {
		return nil, false
	}
	return o.OnCompletion, true
}

// HasOnCompletion returns a boolean if a field has been set.
func (o *RunCreateStateless) HasOnCompletion() bool {
	if o != nil && !IsNil(o.OnCompletion) {
		return true
	}

	return false
}

// SetOnCompletion gets a reference to the given string and assigns it to the OnCompletion field.
func (o *RunCreateStateless) SetOnCompletion(v string) {
	o.OnCompletion = &v
}

// GetOnDisconnect returns the OnDisconnect field value if set, zero value otherwise.
func (o *RunCreateStateless) GetOnDisconnect() string {
	if o == nil || IsNil(o.OnDisconnect) {
		var ret string
		return ret
	}
	return *o.OnDisconnect
}

// GetOnDisconnectOk returns a tuple with the OnDisconnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetOnDisconnectOk() (*string, bool) {
	if o == nil || IsNil(o.OnDisconnect) {
		return nil, false
	}
	return o.OnDisconnect, true
}

// HasOnDisconnect returns a boolean if a field has been set.
func (o *RunCreateStateless) HasOnDisconnect() bool {
	if o != nil && !IsNil(o.OnDisconnect) {
		return true
	}

	return false
}

// SetOnDisconnect gets a reference to the given string and assigns it to the OnDisconnect field.
func (o *RunCreateStateless) SetOnDisconnect(v string) {
	o.OnDisconnect = &v
}

// GetAfterSeconds returns the AfterSeconds field value if set, zero value otherwise.
func (o *RunCreateStateless) GetAfterSeconds() int32 {
	if o == nil || IsNil(o.AfterSeconds) {
		var ret int32
		return ret
	}
	return *o.AfterSeconds
}

// GetAfterSecondsOk returns a tuple with the AfterSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCreateStateless) GetAfterSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.AfterSeconds) {
		return nil, false
	}
	return o.AfterSeconds, true
}

// HasAfterSeconds returns a boolean if a field has been set.
func (o *RunCreateStateless) HasAfterSeconds() bool {
	if o != nil && !IsNil(o.AfterSeconds) {
		return true
	}

	return false
}

// SetAfterSeconds gets a reference to the given int32 and assigns it to the AfterSeconds field.
func (o *RunCreateStateless) SetAfterSeconds(v int32) {
	o.AfterSeconds = &v
}

func (o RunCreateStateless) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunCreateStateless) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assistant_id"] = o.AssistantId
	if o.Input.IsSet() {
		toSerialize["input"] = o.Input.Get()
	}
	if o.Command.IsSet() {
		toSerialize["command"] = o.Command.Get()
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}
	if !IsNil(o.InterruptBefore) {
		toSerialize["interrupt_before"] = o.InterruptBefore
	}
	if !IsNil(o.InterruptAfter) {
		toSerialize["interrupt_after"] = o.InterruptAfter
	}
	if !IsNil(o.StreamMode) {
		toSerialize["stream_mode"] = o.StreamMode
	}
	if !IsNil(o.FeedbackKeys) {
		toSerialize["feedback_keys"] = o.FeedbackKeys
	}
	if !IsNil(o.StreamSubgraphs) {
		toSerialize["stream_subgraphs"] = o.StreamSubgraphs
	}
	if !IsNil(o.OnCompletion) {
		toSerialize["on_completion"] = o.OnCompletion
	}
	if !IsNil(o.OnDisconnect) {
		toSerialize["on_disconnect"] = o.OnDisconnect
	}
	if !IsNil(o.AfterSeconds) {
		toSerialize["after_seconds"] = o.AfterSeconds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RunCreateStateless) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assistant_id",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varRunCreateStateless := _RunCreateStateless{}

	err = json.Unmarshal(data, &varRunCreateStateless)

	if err != nil {
		return err
	}

	*o = RunCreateStateless(varRunCreateStateless)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assistant_id")
		delete(additionalProperties, "input")
		delete(additionalProperties, "command")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "config")
		delete(additionalProperties, "webhook")
		delete(additionalProperties, "interrupt_before")
		delete(additionalProperties, "interrupt_after")
		delete(additionalProperties, "stream_mode")
		delete(additionalProperties, "feedback_keys")
		delete(additionalProperties, "stream_subgraphs")
		delete(additionalProperties, "on_completion")
		delete(additionalProperties, "on_disconnect")
		delete(additionalProperties, "after_seconds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRunCreateStateless struct {
	value *RunCreateStateless
	isSet bool
}

func (v NullableRunCreateStateless) Get() *RunCreateStateless {
	return v.value
}

func (v *NullableRunCreateStateless) Set(val *RunCreateStateless) {
	v.value = val
	v.isSet = true
}

func (v NullableRunCreateStateless) IsSet() bool {
	return v.isSet
}

func (v *NullableRunCreateStateless) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunCreateStateless(val *RunCreateStateless) *NullableRunCreateStateless {
	return &NullableRunCreateStateless{value: val, isSet: true}
}

func (v NullableRunCreateStateless) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunCreateStateless) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


