/*
LangGraph Platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package langgraphgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ThreadStateCheckpointRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadStateCheckpointRequest{}

// ThreadStateCheckpointRequest Payload for getting the state of a thread at a checkpoint.
type ThreadStateCheckpointRequest struct {
	// The checkpoint to get the state for.
	Checkpoint CheckpointConfig `json:"checkpoint"`
	// Include subgraph states.
	Subgraphs *bool `json:"subgraphs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreadStateCheckpointRequest ThreadStateCheckpointRequest

// NewThreadStateCheckpointRequest instantiates a new ThreadStateCheckpointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadStateCheckpointRequest(checkpoint CheckpointConfig) *ThreadStateCheckpointRequest {
	this := ThreadStateCheckpointRequest{}
	this.Checkpoint = checkpoint
	return &this
}

// NewThreadStateCheckpointRequestWithDefaults instantiates a new ThreadStateCheckpointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadStateCheckpointRequestWithDefaults() *ThreadStateCheckpointRequest {
	this := ThreadStateCheckpointRequest{}
	return &this
}

// GetCheckpoint returns the Checkpoint field value
func (o *ThreadStateCheckpointRequest) GetCheckpoint() CheckpointConfig {
	if o == nil {
		var ret CheckpointConfig
		return ret
	}

	return o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value
// and a boolean to check if the value has been set.
func (o *ThreadStateCheckpointRequest) GetCheckpointOk() (*CheckpointConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checkpoint, true
}

// SetCheckpoint sets field value
func (o *ThreadStateCheckpointRequest) SetCheckpoint(v CheckpointConfig) {
	o.Checkpoint = v
}


// GetSubgraphs returns the Subgraphs field value if set, zero value otherwise.
func (o *ThreadStateCheckpointRequest) GetSubgraphs() bool {
	if o == nil || IsNil(o.Subgraphs) {
		var ret bool
		return ret
	}
	return *o.Subgraphs
}

// GetSubgraphsOk returns a tuple with the Subgraphs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadStateCheckpointRequest) GetSubgraphsOk() (*bool, bool) {
	if o == nil || IsNil(o.Subgraphs) {
		return nil, false
	}
	return o.Subgraphs, true
}

// HasSubgraphs returns a boolean if a field has been set.
func (o *ThreadStateCheckpointRequest) HasSubgraphs() bool {
	if o != nil && !IsNil(o.Subgraphs) {
		return true
	}

	return false
}

// SetSubgraphs gets a reference to the given bool and assigns it to the Subgraphs field.
func (o *ThreadStateCheckpointRequest) SetSubgraphs(v bool) {
	o.Subgraphs = &v
}

func (o ThreadStateCheckpointRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadStateCheckpointRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checkpoint"] = o.Checkpoint
	if !IsNil(o.Subgraphs) {
		toSerialize["subgraphs"] = o.Subgraphs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreadStateCheckpointRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"checkpoint",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varThreadStateCheckpointRequest := _ThreadStateCheckpointRequest{}

	err = json.Unmarshal(data, &varThreadStateCheckpointRequest)

	if err != nil {
		return err
	}

	*o = ThreadStateCheckpointRequest(varThreadStateCheckpointRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "checkpoint")
		delete(additionalProperties, "subgraphs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreadStateCheckpointRequest struct {
	value *ThreadStateCheckpointRequest
	isSet bool
}

func (v NullableThreadStateCheckpointRequest) Get() *ThreadStateCheckpointRequest {
	return v.value
}

func (v *NullableThreadStateCheckpointRequest) Set(val *ThreadStateCheckpointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadStateCheckpointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadStateCheckpointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadStateCheckpointRequest(val *ThreadStateCheckpointRequest) *NullableThreadStateCheckpointRequest {
	return &NullableThreadStateCheckpointRequest{value: val, isSet: true}
}

func (v NullableThreadStateCheckpointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadStateCheckpointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


